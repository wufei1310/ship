package admin

import grails.converters.JSON
import ship.DaiFaGoods
import ship.DaiFaOrder
import ship.Market
import ship.MobileMessage
import ship.Pager
import ship.ReturnGoods
import ship.ReturnGoodsPOJO
import ship.ReturnOrder
import ship.ShipSN

class AdminMobileController {

    def adminAreaService;
    def adminUserService;

    def index() {}

    //分拣
    def fenJian() {
        def shipSN = ShipSN.findAllByStatus("1")
        def returnOrder = ReturnOrder.findAllByWuliu_snInList(shipSN.wuliu_sn)


        returnOrder.returnGoods.flatten().each { returnGoods ->
            if (returnGoods.status == "1") {  //1:新入库退换货商品统计2:分拣完毕退换货商品统计
                if (params.market == returnGoods.daiFaGoods.market) {
                    returnGoods.status = "2"
                    returnGoods.fenjianTime = new Date();
                    returnGoods.fenjianUser = session.loginPOJO.user.email;

                }
            }
        }

        def mm = new MobileMessage()
        mm.message = params.market + "退换货商品分拣完毕，等待代发人员领货退换"
        mm.result = "success"

        render mm as JSON
    }

    //获取退换货市场统计
    def shipForMarket() {

        def shipSN = ShipSN.findAllByStatus("1")
        def returnOrder = ReturnOrder.findAllByWuliu_snInList(shipSN.wuliu_sn)
        def searchMarket = {
        }
        def marketList = Market.createCriteria().list(searchMarket)

        def resultList = []

        marketList.each { market ->
            Long return_num = 0
            def m_map = [:]
            returnOrder.returnGoods.flatten().each { returnGoods ->

                if (returnGoods.status == params.returnGoodsStatus) {  //1:新入库退换货商品统计 2:分拣完毕退换货商品统计

                    if (market.market_name == returnGoods.daiFaGoods.market) {
                        return_num = return_num + returnGoods.return_num
                    }
                }


            }
            m_map.market = market.market_name
            m_map.num = return_num
            resultList.add(m_map)

        }


        def mm = new MobileMessage()
        mm.message = "获取市场退换货商品数量成功"
        mm.result = "success"
        mm.model = [list: resultList]
        render mm as JSON

    }

    //会员提交退换货请求处理
    def returnToStall() {
        def returnGoods = ReturnGoods.get(params.returnGoodsId as Long)

        def mm = new MobileMessage()

        if (params.status == "4") {
            returnGoods.status = params.status
            returnGoods.actual_returnTime = new Date()
            returnGoods.actual_return_fee = new BigDecimal(params.actual_return_fee)

            mm.message = "退货成功"


        }


        if (params.status == "7") {
            returnGoods.status = params.status
            returnGoods.actual_returnTime = new Date()

            mm.message = "换货成功"


        }

        if (params.status == "6") {
            returnGoods.status = params.status
            returnGoods.reason = params.reason

            returnGoods.actual_returnTime = new Date()
            returnGoods.actual_return_fee = 0
            returnGoods.reason = params.reason

            mm.message = params.reason + "，退货不成功"
        }

        if (params.status == "8") {
            returnGoods.status = params.status
            returnGoods.actual_returnTime = new Date()
            returnGoods.reason = params.reason
            mm.message = params.reason + "，换货不成功"


        }

        //更改退货申请的状态
        def returnOrder = returnGoods.returnOrder;
        def isTuiOver = "1"  //退换货申请下的退货商品是否都处理了？
        //退货

        int returnGoodsCount = 0;
        int tuiGoodsCount = 0;
        int huanGoodsCount = 0;

        int tuiSucc = 0;//退货成功商品
        int tuiFail = 0;//退货失败商品

        int huanSucc = 0;//换货成功商品
        int huanFail = 0;//换货失败商品

        returnOrder.returnGoods.each {
            returnGoodsCount++
            if (it.type == "0") {
                tuiGoodsCount++;
                if (it.status == "4") {
                    tuiSucc++;
                } else if (it.status == "6") {
                    tuiFail++;
                }
            }

            if (it.type == "1") {
                huanGoodsCount++;
                if (it.status == "7") {
                    huanSucc++;
                } else if (it.status == "8") {
                    huanFail++;
                }
            }

        }


        println "tuiGoodsCount:" + tuiGoodsCount
        println "tuiSucc:" + tuiSucc
        println "tuiFail:" + tuiFail

        if ((tuiSucc != 0) && tuiGoodsCount == (tuiSucc + tuiFail)) {
            returnOrder.needTui = "1"
        } else if (tuiGoodsCount == tuiFail) {
            returnOrder.needTui = "3"
            returnOrder.status = "2"  //处理结束
        } else {
            returnOrder.needTui = "0"
        }


        if ((huanSucc != 0) && huanGoodsCount == (huanSucc + huanFail)) {
            returnOrder.needShip = "1"
        } else if (huanGoodsCount == huanFail) {

            returnOrder.needShip = "3"

            returnOrder.status = "2"  //处理结束

        } else {
            returnOrder.needShip = "0"
        }



        mm.result = "success"
        render mm as JSON


    }

    //代发人员受理退换货
    def daifaShouLiReturn() {
        def returnGoods = ReturnGoods.findAllByStatus("2")
        returnGoods.each { it ->

            if (params.market == it.daiFaGoods.market) {


                it.status = "5"//已受理
                it.shouliUser = session.loginPOJO.user.email
                it.shouliUserId = session.loginPOJO.user.id
                it.shouliTime = new Date();
            }

        }

        def mm = new MobileMessage()
        mm.message = params.market + "退换货商品已领出"
        mm.result = "success"

        render mm as JSON

    }

    //代发人员已经处理的退换货，成功或者不成功的,管理员查看
    def hasDoneReturnOfWuliu() {


        if (!params.max) {
            params.max = 10
        } else {
            params.max = new Long(params.max)
        }
        if (!params.offset) params.offset = 0


        if (!params.sort) params.sort = "actual_returnTime"
        if (!params.order) params.order = "desc"


        def searchClosure = {

            if (params.returnFail == "1") {
                inList("status", ['6', '8'])
            } else {
                eq("status", params.status)
            }


        }

        def o = ReturnGoods.createCriteria();
        def results = o.list(params, searchClosure)
        def m_list = []
        results.each { it ->

            ReturnGoodsPOJO returnGoodsPOJO = new ReturnGoodsPOJO();
            returnGoodsPOJO.returnOrderId = it.returnOrder.id
            returnGoodsPOJO.returnGoodsId = it.id
            returnGoodsPOJO.goodsId = it.daiFaGoods.id
            returnGoodsPOJO.market = it.daiFaGoods.market
            returnGoodsPOJO.floor = it.daiFaGoods.floor
            returnGoodsPOJO.stalls = it.daiFaGoods.stalls
            returnGoodsPOJO.goods_sn = it.daiFaGoods.goods_sn
            returnGoodsPOJO.spec = it.daiFaGoods.spec
            returnGoodsPOJO.wuliu = it.returnOrder.wuliu
            returnGoodsPOJO.wuliu_sn = it.returnOrder.wuliu_sn
            returnGoodsPOJO.orderSN = it.returnOrder.orderSN

            returnGoodsPOJO.actual_price = it.actual_price
            returnGoodsPOJO.return_fee = it.return_fee
            returnGoodsPOJO.num = it.return_num   //退回的商品数量

            returnGoodsPOJO.actual_return_fee = it.actual_return_fee
            returnGoodsPOJO.actual_returnTime = it.actual_returnTime

            returnGoodsPOJO.type = it.type;
            returnGoodsPOJO.status = it.status;

            returnGoodsPOJO.shouliUser = it.shouliUser
            returnGoodsPOJO.shouliTime = it.shouliTime

            //记录给换货的商品信息
            returnGoodsPOJO.changeMarket = it.market
            returnGoodsPOJO.changeFloor = it.floor
            returnGoodsPOJO.changeStalls = it.stalls
            returnGoodsPOJO.changeGoods_sn = it.goods_sn
            returnGoodsPOJO.changeSpec = it.spec

            returnGoodsPOJO.returnReason = it.returnReason
            returnGoodsPOJO.reason = it.reason;


            m_list.add(returnGoodsPOJO)

        }





        def map = [list: m_list]


        if (params.mobile == "mobile") {
            //封装分页传给手机端
            def pager = new Pager(max: params.max, "offset": params.offset, "totalPage": ((results.totalCount - 1) / params.max + 1) as int, total: results.totalCount)
            map.put("pager", pager)

            def mm = new MobileMessage()

            if (params.status == "4") {
                mm.message = "代发人员已成功的退换货商品列表"
            }
            if (params.status == "6") {
                mm.message = "代发人员不成功的退换货商品列表"
            }


            mm.result = "success"
            mm.model = map
            render mm as JSON
        }
    }

    //提供管理员根据代发员和时间查询他的退货数据
    def hasDoneReturn() {
        def daifa_user_id = params.daifa_user_id
        def actual_returnTime = params.actual_returnTime

        forward(action: 'hasDoneReturnOfDaiFa', params: [daifa_user_id: daifa_user_id, actual_returnTime: actual_returnTime])

    }

    //代发人员已经处理的退换货，成功或者不成功的
    def hasDoneReturnOfDaiFa() {
        if (!params.sort) params.sort = "actual_returnTime"
        if (!params.order) params.order = "desc"


        def searchClosure = {


            between('actual_returnTime', Date.parse("yyyy-MM-dd HH:mm:ss", params.actual_returnTime + ' 00:00:00'), Date.parse("yyyy-MM-dd HH:mm:ss", params.actual_returnTime + ' 23:59:59'))

            if (params.daifa_user_id) {
                eq("shouliUserId", params.daifa_user_id as Long)
            } else {
                eq("shouliUserId", session.loginPOJO.user.id)
            }

            eq("status", params.status)

        }

        def o = ReturnGoods.createCriteria();
        def results = o.list(params, searchClosure)
        def m_list = []
        results.each { it ->

            ReturnGoodsPOJO returnGoodsPOJO = new ReturnGoodsPOJO();
            returnGoodsPOJO.returnOrderId = it.returnOrder.id
            returnGoodsPOJO.returnGoodsId = it.id
            returnGoodsPOJO.goodsId = it.daiFaGoods.id
            returnGoodsPOJO.market = it.daiFaGoods.market
            returnGoodsPOJO.floor = it.daiFaGoods.floor
            returnGoodsPOJO.stalls = it.daiFaGoods.stalls
            returnGoodsPOJO.goods_sn = it.daiFaGoods.goods_sn
            returnGoodsPOJO.spec = it.daiFaGoods.spec
            returnGoodsPOJO.wuliu = it.returnOrder.wuliu
            returnGoodsPOJO.wuliu_sn = it.returnOrder.wuliu_sn
            returnGoodsPOJO.orderSN = it.returnOrder.orderSN

            returnGoodsPOJO.actual_price = it.actual_price
            returnGoodsPOJO.return_fee = it.return_fee
            returnGoodsPOJO.num = it.return_num   //退回的商品数量

            returnGoodsPOJO.actual_return_fee = it.actual_return_fee
            returnGoodsPOJO.actual_returnTime = it.actual_returnTime

            returnGoodsPOJO.reason = it.reason;



            m_list.add(returnGoodsPOJO)

        }





        def map = [list: m_list]


        if (params.mobile == "mobile") {


            def mm = new MobileMessage()

            if (params.status == "4") {
                mm.message = "代发人员已成功的退换货商品列表"
            }
            if (params.status == "6") {
                mm.message = "代发人员不成功的退换货商品列表"
            }


            mm.result = "success"
            mm.model = map

            render mm as JSON
        }
    }

    //管理员查询退换货中的商品
    def returnGoodsListOfAdmin() {


        if (!params.max) {
            params.max = 10
        } else {
            params.max = new Long(params.max)
        }
        if (!params.offset) params.offset = 0


        if (!params.sort) params.sort = "shouliTime"
        if (!params.order) params.order = "asc"





        def searchClosure = {


            if (params.goods_sn) {
                def daiFaGoods = DaiFaGoods.findAllByGoods_snLike("%" + params.goods_sn + "%")
                inList("daiFaGoods", daiFaGoods)
            }

            if (params.thIng == "1") {  //退换货处理中
                eq("status", '5')
            }
            if (params.thFail == "1") { //退换不成功
                inList("status", ['6', '8'])
            }


        }

        def o = ReturnGoods.createCriteria();
        def results = o.list(params, searchClosure)
        def m_list = []
        results.each { it ->

            ReturnGoodsPOJO returnGoodsPOJO = new ReturnGoodsPOJO();
            returnGoodsPOJO.returnOrderId = it.returnOrder.id
            returnGoodsPOJO.returnGoodsId = it.id
            returnGoodsPOJO.goodsId = it.daiFaGoods.id
            returnGoodsPOJO.market = it.daiFaGoods.market
            returnGoodsPOJO.floor = it.daiFaGoods.floor
            returnGoodsPOJO.stalls = it.daiFaGoods.stalls
            returnGoodsPOJO.goods_sn = it.daiFaGoods.goods_sn
            returnGoodsPOJO.spec = it.daiFaGoods.spec
            returnGoodsPOJO.wuliu = it.returnOrder.wuliu
            returnGoodsPOJO.wuliu_sn = it.returnOrder.wuliu_sn
            returnGoodsPOJO.orderSN = it.returnOrder.orderSN

            returnGoodsPOJO.actual_price = it.actual_price
            returnGoodsPOJO.return_fee = it.return_fee
            returnGoodsPOJO.num = it.return_num   //退回的商品数量

            returnGoodsPOJO.actual_return_fee = it.actual_return_fee
            returnGoodsPOJO.actual_returnTime = it.actual_returnTime

            returnGoodsPOJO.type = it.type;
            returnGoodsPOJO.status = it.status;

            returnGoodsPOJO.shouliUser = it.shouliUser
            returnGoodsPOJO.shouliTime = it.shouliTime

            //记录给换货的商品信息
            returnGoodsPOJO.changeMarket = it.market
            returnGoodsPOJO.changeFloor = it.floor
            returnGoodsPOJO.changeStalls = it.stalls
            returnGoodsPOJO.changeGoods_sn = it.goods_sn
            returnGoodsPOJO.changeSpec = it.spec

            returnGoodsPOJO.returnReason = it.returnReason
            returnGoodsPOJO.reason = it.reason;



            m_list.add(returnGoodsPOJO)

        }





        def map = [list: m_list]


        if (params.mobile == "mobile") {
            //封装分页传给手机端
            def pager = new Pager(max: params.max, "offset": params.offset, "totalPage": ((results.totalCount - 1) / params.max + 1) as int, total: results.totalCount)
            map.put("pager", pager)

            def mm = new MobileMessage()

            mm.message = "物流获取退换货商品列表成功"


            mm.result = "success"
            mm.model = map
            render mm as JSON
        }


    }

    //物流查询退换货中的商品
    def returnGoodsListOfWuliu() {


        if (!params.max) {
            params.max = 10
        } else {
            params.max = new Long(params.max)
        }
        if (!params.offset) params.offset = 0


        if (!params.sort) params.sort = "shouliTime"
        if (!params.order) params.order = "asc"





        def searchClosure = {


            if (params.goods_sn) {
                def daiFaGoods = DaiFaGoods.findAllByGoods_snLike("%" + params.goods_sn + "%")
                inList("daiFaGoods", daiFaGoods)
            }


            eq("status", '5')


        }

        def o = ReturnGoods.createCriteria();
        def results = o.list(params, searchClosure)
        def m_list = []
        results.each { it ->

            ReturnGoodsPOJO returnGoodsPOJO = new ReturnGoodsPOJO();
            returnGoodsPOJO.returnOrderId = it.returnOrder.id
            returnGoodsPOJO.returnGoodsId = it.id
            returnGoodsPOJO.goodsId = it.daiFaGoods.id
            returnGoodsPOJO.market = it.daiFaGoods.market
            returnGoodsPOJO.floor = it.daiFaGoods.floor
            returnGoodsPOJO.stalls = it.daiFaGoods.stalls
            returnGoodsPOJO.goods_sn = it.daiFaGoods.goods_sn
            returnGoodsPOJO.spec = it.daiFaGoods.spec
            returnGoodsPOJO.wuliu = it.returnOrder.wuliu
            returnGoodsPOJO.wuliu_sn = it.returnOrder.wuliu_sn
            returnGoodsPOJO.orderSN = it.returnOrder.orderSN

            returnGoodsPOJO.actual_price = it.actual_price
            returnGoodsPOJO.return_fee = it.return_fee
            returnGoodsPOJO.num = it.return_num   //退回的商品数量

            returnGoodsPOJO.actual_return_fee = it.actual_return_fee
            returnGoodsPOJO.actual_returnTime = it.actual_returnTime

            returnGoodsPOJO.type = it.type;
            returnGoodsPOJO.status = it.status;

            returnGoodsPOJO.shouliUser = it.shouliUser
            returnGoodsPOJO.shouliTime = it.shouliTime

            //记录给换货的商品信息
            returnGoodsPOJO.changeMarket = it.market
            returnGoodsPOJO.changeFloor = it.floor
            returnGoodsPOJO.changeStalls = it.stalls
            returnGoodsPOJO.changeGoods_sn = it.goods_sn
            returnGoodsPOJO.changeSpec = it.spec

            returnGoodsPOJO.returnReason = it.returnReason
            returnGoodsPOJO.reason = it.reason;



            m_list.add(returnGoodsPOJO)

        }





        def map = [list: m_list]


        if (params.mobile == "mobile") {
            //封装分页传给手机端
            def pager = new Pager(max: params.max, "offset": params.offset, "totalPage": ((results.totalCount - 1) / params.max + 1) as int, total: results.totalCount)
            map.put("pager", pager)

            def mm = new MobileMessage()

            mm.message = "物流获取退换货商品列表成功"


            mm.result = "success"
            mm.model = map
            render mm as JSON
        }


    }

    //已被代发人员领出办理处，需要退换处理的
    def returnGoodsListOfDaiFa() {
        def returnGoods = ReturnGoods.findAllByShouliUserIdAndStatus(session.loginPOJO.user.id, "5")
        def m_list = []
        returnGoods.each { it ->

            ReturnGoodsPOJO returnGoodsPOJO = new ReturnGoodsPOJO();
            returnGoodsPOJO.returnOrderId = it.returnOrder.id
            returnGoodsPOJO.returnGoodsId = it.id

            returnGoodsPOJO.status = it.status

            returnGoodsPOJO.goodsId = it.daiFaGoods.id
            returnGoodsPOJO.market = it.daiFaGoods.market
            returnGoodsPOJO.floor = it.daiFaGoods.floor
            returnGoodsPOJO.stalls = it.daiFaGoods.stalls
            returnGoodsPOJO.goods_sn = it.daiFaGoods.goods_sn
            returnGoodsPOJO.spec = it.daiFaGoods.spec

            //记录给换货的商品信息
            returnGoodsPOJO.changeMarket = it.market
            returnGoodsPOJO.changeFloor = it.floor
            returnGoodsPOJO.changeStalls = it.stalls
            returnGoodsPOJO.changeGoods_sn = it.goods_sn
            returnGoodsPOJO.changeSpec = it.spec



            returnGoodsPOJO.wuliu = it.returnOrder.wuliu
            returnGoodsPOJO.wuliu_sn = it.returnOrder.wuliu_sn
            returnGoodsPOJO.orderSN = it.returnOrder.orderSN

            returnGoodsPOJO.actual_price = it.actual_price
            returnGoodsPOJO.return_fee = it.return_fee
            returnGoodsPOJO.num = it.return_num   //退回的商品数量
            returnGoodsPOJO.type = it.type   //退回的商品数量

            returnGoodsPOJO.returnReason = it.returnReason
            returnGoodsPOJO.reason = it.reason;

            m_list.add(returnGoodsPOJO)

        }

        def mm = new MobileMessage()
        mm.message = "获取我的退换货商品列表成功"
        mm.result = "success"
        mm.model = [list: m_list]

        render mm as JSON
    }

    //代发人员的退换货商品列表接口
    def returnGoodsListForDaiFa() {

        def returnGoods = ReturnGoods.findAllByStatus("2")


        def m_list = []
        returnGoods.each { it ->
            if (params.market == it.daiFaGoods.market) {

                ReturnGoodsPOJO returnGoodsPOJO = new ReturnGoodsPOJO();
                returnGoodsPOJO.returnOrderId = it.returnOrder.id
                returnGoodsPOJO.returnGoodsId = it.id
                returnGoodsPOJO.goodsId = it.daiFaGoods.id
                returnGoodsPOJO.market = it.daiFaGoods.market
                returnGoodsPOJO.floor = it.daiFaGoods.floor
                returnGoodsPOJO.stalls = it.daiFaGoods.stalls
                returnGoodsPOJO.goods_sn = it.daiFaGoods.goods_sn
                returnGoodsPOJO.spec = it.daiFaGoods.spec

                returnGoodsPOJO.num = it.daiFaGoods.num
                returnGoodsPOJO.wuliu = it.returnOrder.wuliu
                returnGoodsPOJO.wuliu_sn = it.returnOrder.wuliu_sn
                returnGoodsPOJO.orderSN = it.returnOrder.orderSN


                returnGoodsPOJO.actual_price = it.actual_price
                returnGoodsPOJO.return_fee = it.return_fee
                returnGoodsPOJO.num = it.return_num
                returnGoodsPOJO.type = it.type   //退回的商品数量

                m_list.add(returnGoodsPOJO)
            }

        }

        def mm = new MobileMessage()
        mm.message = "获取" + params.market + "退换货商品列表成功,等待代发人员受理"
        mm.result = "success"
        mm.model = [list: m_list]

        render mm as JSON
    }

    //根据市场查询下面的退换货商品
    def returnGoodsList() {


        def shipSN = ShipSN.findAllByStatus("1")
        def returnOrder = ReturnOrder.findAllByWuliu_snInList(shipSN.wuliu_sn)
        def m_list = []
        returnOrder.returnGoods.flatten().each { returnGoods ->
            if (returnGoods.status == params.returnGoodsStatus) {  //1:新入库2:分拣完毕
                if (params.market == returnGoods.daiFaGoods.market) {

                    ReturnGoodsPOJO returnGoodsPOJO = new ReturnGoodsPOJO();
                    returnGoodsPOJO.returnOrderId = returnGoods.returnOrder.id
                    returnGoodsPOJO.returnGoodsId = returnGoods.id
                    returnGoodsPOJO.goodsId = returnGoods.daiFaGoods.id
                    returnGoodsPOJO.market = returnGoods.daiFaGoods.market
                    returnGoodsPOJO.floor = returnGoods.daiFaGoods.floor
                    returnGoodsPOJO.stalls = returnGoods.daiFaGoods.stalls
                    returnGoodsPOJO.goods_sn = returnGoods.daiFaGoods.goods_sn
                    returnGoodsPOJO.spec = returnGoods.daiFaGoods.spec
                    returnGoodsPOJO.wuliu = returnGoods.returnOrder.wuliu
                    returnGoodsPOJO.wuliu_sn = returnGoods.returnOrder.wuliu_sn
                    returnGoodsPOJO.orderSN = returnGoods.returnOrder.orderSN

                    returnGoodsPOJO.actual_price = returnGoods.actual_price
                    returnGoodsPOJO.return_fee = returnGoods.return_fee
                    returnGoodsPOJO.num = returnGoods.return_num
                    returnGoodsPOJO.type = returnGoods.type   //退回的商品数量

                    m_list.add(returnGoodsPOJO)
                }
            }

        }

        def mm = new MobileMessage()
        mm.message = "获取" + params.market + "退换货商品列表成功"
        mm.result = "success"
        mm.model = [list: m_list]

        render mm as JSON


    }

    //物流单号列表查询
    def shipList() {


        if (!params.max) {
            params.max = 10
        } else {
            params.max = new Long(params.max)
        }
        if (!params.offset) params.offset = 0
        if (!params.sort) params.sort = "dateCreated"
        if (!params.order) params.order = "desc"


        def searchClosure = {


            if (params.status == "wait") {
                eq("status", "1")
            }


            if (params.status == "noowner") {

                inList("status", ["0", "2"])
            }

            if (params.status == "noownerandhasreturn") {
                eq("needTui", "2")
            }

        }

        def o = ShipSN.createCriteria();
        def results = o.list(params, searchClosure)
        def daifaList = adminUserService.selUser("daifa")
        def map = [list: results, total: results.totalCount, daifaList: daifaList]


        if (params.mobile == "mobile") {

            //封装分页传给手机端
            def pager = new Pager(max: params.max, "offset": params.offset, "totalPage": ((results.totalCount - 1) / params.max + 1) as int, total: results.totalCount)
            map.put("pager", pager)

            def mm = new MobileMessage()

            if (params.message) {
                mm.message = params.message
            } else {
                mm.message = "获取物流登记统计列表成功"
            }


            mm.result = "success"
            mm.model = map

            render mm as JSON
        }


    }

    def regShipSNNum() {
        //查询入库商品数量
        def shipSN = ShipSN.findAllByStatus("1")
        def confirmOrder = ReturnOrder.findAllByWuliu_snInList(shipSN.wuliu_sn)


        Long new_num = 0;//新入库商品数量
        Long wait_num = 0;//分拣完毕商品数量
        confirmOrder.returnGoods.flatten().each { returnGoods ->
            if (returnGoods.status == "1") {
                new_num = new_num + returnGoods.return_num
            }
            if (returnGoods.status == "2") {
                wait_num = wait_num + returnGoods.return_num
            }

        }


        def noowner = ShipSN.countByStatusInList(["0", "2"])

        def map = [new_num: new_num, wait: wait_num, noowner: noowner]
        def mm = new MobileMessage()
        mm.message = "获取物流登记统计数据成功"
        mm.result = "success"
        mm.model = map

        render mm as JSON
    }

    //扫描退回包裹的物流单号
    def checkReturnOrderSN() {
        def mm = new MobileMessage()
        ReturnOrder returnOrder = ReturnOrder.findByWuliu_snAndStatus(params.wuliu_sn, "1")//已经支付的退换货申请


        if (!returnOrder) {

            ShipSN shipSN = ShipSN.findByWuliu_sn(params.wuliu_sn)
            if (!shipSN) {
                shipSN = new ShipSN();
            }
            shipSN.num = params.num as int
            shipSN.wuliu_sn = params.wuliu_sn
            shipSN.status = "0"
            shipSN.orderSN = "0000"
            shipSN.needTui = "0" //无主包裹没有关联退换货申请
            shipSN.addUser = session.loginPOJO.user.id
            shipSN.addEmail = session.loginPOJO.user.email
            shipSN.save();
            mm.result = "fail"
            mm.message = "系统中没有该物流单号的退换货申请,录入无主包裹"
        } else {
            int return_num = 0;
            returnOrder.returnGoods.each { it ->

                return_num = return_num + (it.return_num as int);
            }

            if (return_num == (params.num as int)) {
                ShipSN shipSN = ShipSN.findByWuliu_sn(params.wuliu_sn)
                if (!shipSN) {
                    shipSN = new ShipSN();
                }
                shipSN.addUser = session.loginPOJO.user.id
                shipSN.addEmail = session.loginPOJO.user.email
                shipSN.num = params.num as int
                shipSN.wuliu_sn = params.wuliu_sn
                shipSN.status = "1"
                shipSN.needTui = "1" //无主包裹关联退换货申请
                shipSN.orderSN = returnOrder.orderSN
                shipSN.save();


                returnOrder.isScan = "1"
                returnOrder.returnGoods.each { it ->

                    it.rukuUser = session.loginPOJO.user.email
                    it.rukuTime = new Date();
                    it.status = "1" //记录该退换货商品办事处入库
                }


                mm.result = "success"
                mm.message = "物流单号与商品数量匹配，录入新入库"


            } else {
                ShipSN shipSN = ShipSN.findByWuliu_sn(params.wuliu_sn)
                if (!shipSN) {
                    shipSN = new ShipSN();
                }
                shipSN.num = params.num as int


                shipSN.addUser = session.loginPOJO.user.id
                shipSN.addEmail = session.loginPOJO.user.email
                shipSN.actualnum = return_num
                shipSN.wuliu_sn = params.wuliu_sn
                shipSN.status = "2"
                shipSN.needTui = "1" //无主包裹关联退换货申请
                shipSN.orderSN = returnOrder.orderSN
                shipSN.save();
                mm.result = "fail"
                mm.message = "物流单号准确，商品数量不匹配，录入无主包裹"
            }
        }

        //查询入库商品数量
        def shipSN = ShipSN.findAllByStatus("1")
        def confirmOrder = ReturnOrder.findAllByWuliu_snInList(shipSN.wuliu_sn)


        Long new_num = 0;//新入库商品数量
        Long wait_num = 0;//分拣完毕商品数量
        confirmOrder.returnGoods.flatten().each { returnGoods ->
            if (returnGoods.status == "1") {
                new_num = new_num + returnGoods.return_num
            }
            if (returnGoods.status == "2") {
                wait_num = wait_num + returnGoods.return_num
            }

        }


        def noowner = ShipSN.countByStatusInList(["0", "2"])


        def map = [new_num: new_num, wait: wait_num, noowner: noowner, wuliu_sn: params.wuliu_sn]

        mm.model = map

        render mm as JSON
        return;
    }

    //为无主包裹关联订单号
    def noownershopOrderSN() {


//        def daiFaOrder = DaiFaOrder.findByOrderSN(params.shopOrderSN)
//        if (!daiFaOrder) {
//            def mm = new MobileMessage()
//            mm.result = "fail"
//            mm.message = "输入订单号不存在，请检查！"
//            mm.model = [shopOrderSN: params.shopOrderSN, wuliu_sn: params.wuliu_sn]
//            render mm as JSON
//            return;
//        }



        ShipSN shipSN = ShipSN.findByWuliu_sn(params.wuliu_sn)
        shipSN.shopOrderSN = params.shopOrderSN
        shipSN.save();

        def mm = new MobileMessage()
        mm.result = "success"
        mm.message = "无主包裹录入成功"

        //查询入库商品数量
        def shipSN2 = ShipSN.findAllByStatus("1")  //已经入库物流单号
        def confirmOrder = ReturnOrder.findAllByWuliu_snInList(shipSN2.wuliu_sn)


        Long new_num = 0;//新入库商品数量
        Long wait_num = 0;//分拣完毕商品数量
        confirmOrder.returnGoods.flatten().each { returnGoods ->
            if (returnGoods.status == "1") {
                new_num = new_num + returnGoods.return_num
            }
            if (returnGoods.status == "2") {
                wait_num = wait_num + returnGoods.return_num
            }

        }


        def noowner = ShipSN.countByStatusInList(["0", "2"])

        def map = [new_num: new_num, wait: wait_num, noowner: noowner, wuliu_sn: params.wuliu_sn]

        mm.model = map

        render mm as JSON
        return;

    }

    //为无主包裹提示地区id
    def noownerAreaId() {
        ShipSN shipSN = ShipSN.findByWuliu_sn(params.wuliu_sn)
        if (!shipSN) {
            shipSN = new ShipSN();
        }
        shipSN.wuliu_sn = params.wuliu_sn


        shipSN.area_id = params.area_id
        shipSN.save();
        def mm = new MobileMessage()
        mm.result = "success"
        mm.message = "为无主包裹匹配地区成功，等待筛查"

        //查询入库商品数量
        def shipSN2 = ShipSN.findAllByStatus("1")  //已经入库物流单号
        def confirmOrder = ReturnOrder.findAllByWuliu_snInList(shipSN2.wuliu_sn)


        Long new_num = 0;//新入库商品数量
        Long wait_num = 0;//分拣完毕商品数量
        confirmOrder.returnGoods.flatten().each { returnGoods ->
            if (returnGoods.status == "1") {
                new_num = new_num + returnGoods.return_num
            }
            if (returnGoods.status == "2") {
                wait_num = wait_num + returnGoods.return_num
            }

        }


        def noowner = ShipSN.countByStatusInList(["0", "2"])

        def map = [new_num: new_num, wait: wait_num, noowner: noowner, wuliu_sn: params.wuliu_sn]

        mm.model = map

        render mm as JSON
        return;

    }


    def adminCount() {
        def waitpay = DaiFaOrder.executeQuery("select count(a.id) from DaiFaOrder a  where  a.status='waitpay'")[0]
        def searchClosure = {
            projections {
                rowCount()
            }
            daiFaOrder {
                ne("status", "delete")
                ne("status", "waitpay")
            }
            eq("status", "0")
        }

        def o = DaiFaGoods.createCriteria();
        def weishouli = o.list(searchClosure)[0]
        searchClosure = {

            projections {
                rowCount()
            }


            daiFaOrder {
                ne("status", "delete")
                ne("status", "waitpay")
            }
            eq("status", "1")
        }

        o = DaiFaGoods.createCriteria();
        def shouli = o.list(searchClosure)[0]
        def error = DaiFaOrder.executeQuery("select count(a.id) from DaiFaOrder a  where  a.status='error'")[0]
        def diffship = DaiFaOrder.executeQuery("select count(a.id) from DaiFaOrder a  where  a.status='diffship'")[0]
        def partaccept = DaiFaOrder.executeQuery("select count(a.id) from DaiFaOrder a  where  a.status='partaccept'")[0]
        def allaccept = DaiFaOrder.executeQuery("select count(a.id) from DaiFaOrder a  where  a.status='allaccept'")[0]

        def shipped = DaiFaOrder.executeQuery("select count(a.id) from DaiFaOrder a  where  a.status='shipped'")[0]
        def problem = DaiFaOrder.executeQuery("select count(a.id) from DaiFaOrder a  where  a.status='problem'")[0]
        searchClosure = {
            projections {
                rowCount()
            }
            daiFaOrder {
                ne("status", "delete")
                ne("status", "waitpay")
            }
            eq("status", "2")
        }

        o = DaiFaGoods.createCriteria();
        def yanshou = o.list(searchClosure)[0]
        def goods_shipped = DaiFaGoods.executeQuery("select count(a.id) from DaiFaGoods a  where  a.status='9'")[0]
        def tuihuancount = ReturnOrder.executeQuery("select count(a.id) from ReturnOrder a  where  a.isScan='0'")[0]
        //统计新提交未扫描的退换货申请数据
        def canExport = DaiFaOrder.executeQuery("select count(a.id) from DaiFaOrder a  where  a.isCanExport='1'")[0]
        def noowner = ShipSN.countByStatusInList(["0", "2"])

        def noownerandhasreturn = ShipSN.countByNeedTui("2")

        def ddthhcount = ReturnGoods.executeQuery("select count(a.id) from ReturnGoods a  where  a.status='2'")[0]
        //等待退换货商品数量
        def thIng = ReturnGoods.executeQuery("select count(a.id) from ReturnGoods a  where  a.status='5'")[0]
        //退换货处理中,代发已领货
        def thFail = ReturnGoods.countByStatusInList(['6', '8'])


        def map = [noownerandhasreturn: noownerandhasreturn, waitpay: waitpay, weishouli: weishouli, shouli: shouli, error: error, diffship: diffship,
                   partaccept         : partaccept, allaccept: allaccept, shipped: shipped, problem: problem, yanshou: yanshou,
                   goods_shipped      : goods_shipped, tuihuancount: tuihuancount, canExport: canExport, noowner: noowner,
                   ddthhcount         : ddthhcount, thIng: thIng, thFail: thFail]
        if (params.mobile == "mobile") {
            def mm = new MobileMessage()
            mm.message = "获取订单总数成功"
            mm.result = "success"
            mm.model = map

            render mm as JSON
        } else {
            render map
        }
    }

    def wuliuCount() {
        def allaccept = DaiFaOrder.executeQuery("select count(a.id) from DaiFaOrder a  where  a.status='allaccept'")[0]
        def searchClosure = {
            projections {
                rowCount()
            }
            daiFaOrder {
                ne("status", "delete")
                ne("status", "waitpay")
            }
            eq("status", "2")
        }

        def o = DaiFaGoods.createCriteria();
        def yanshou = o.list(searchClosure)[0]
        def canExport = DaiFaOrder.executeQuery("select count(a.id) from DaiFaOrder a  where  a.isCanExport='1'")[0]
        searchClosure = {
            projections {
                rowCount()
            }
            daiFaOrder {
                ne("status", "delete")
                ne("status", "waitpay")
            }
            eq("status", "0")
        }

        o = DaiFaGoods.createCriteria();
        def weishouli = o.list(searchClosure)[0]
        searchClosure = {

            projections {
                rowCount()
            }


            daiFaOrder {
                ne("status", "delete")
                ne("status", "waitpay")
            }
            eq("status", "1")
        }

        o = DaiFaGoods.createCriteria();
        def shouli = o.list(searchClosure)[0]


        def shipped = DaiFaOrder.executeQuery("select count(a.id) from DaiFaOrder a  where  a.status='shipped'")[0]
        def goods_shipped = DaiFaGoods.executeQuery("select count(a.id) from DaiFaGoods a  where  a.status='9'")[0]


        def partaccept = DaiFaOrder.executeQuery("select count(a.id) from DaiFaOrder a  where  a.status='partaccept'")[0]
        def ddthhcount = ReturnGoods.executeQuery("select count(a.id) from ReturnGoods a  where  a.status='2'")[0]
        //等待退换货商品数量
        def thIng = ReturnGoods.executeQuery("select count(a.id) from ReturnGoods a  where  a.status='5'")[0]
        //退换货处理中,代发已领货
        def thFail = ReturnGoods.countByStatusInList(['6', '8'])
        def noowner = ShipSN.countByStatusInList(["0", "2"])
        def xrkcount = ReturnGoods.executeQuery("select count(a.id) from ReturnGoods a  where  a.status='1'")[0]
        //新入库商品数量
        def needShip = ReturnOrder.executeQuery("select count(a.id) from ReturnOrder a  where  a.needShip='1'")[0]
        //等待发货的退换货申请

        def map = [goods_shipped:goods_shipped,shipped:shipped,allaccept : allaccept, yanshou: yanshou, canExport: canExport, weishouli: weishouli, shouli: shouli,
                   partaccept: partaccept, ddthhcount: ddthhcount, thIng: thIng, thFail: thFail, noowner: noowner, xrkcount: xrkcount, needShip: needShip]

        if (params.mobile == "mobile") {
            def mm = new MobileMessage()
            mm.message = "获取订单总数成功"
            mm.result = "success"
            mm.model = map

            render mm as JSON
        } else {
            render map
        }
    }
}
