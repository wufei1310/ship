package member

import ship.DaiFaOrder
import ship.DaiFaGoods
import ship.User
import grails.converters.JSON
import com.yiyu.push.BaiduPush
import ship.PushPOJO
import ship.PushMsg
import ship.Market
import util.Push
import util.StringUtil
import admin.BaseController
import ship.AreaShip
import ship.Express
import org.springframework.core.io.ClassPathResource
import org.springframework.core.io.support.PropertiesLoaderUtils
import ship.ReturnOrder
import ship.ReturnGoods
import exception.MessageException
import common.CommonParams
import util.RemoteFileUtil

class MemberDaiFaOrderController extends BaseController {
    def memberDaiFaService
    def mailService;
    def properties = PropertiesLoaderUtils.loadProperties(new ClassPathResource("sysSetting.properties"))

    def testMail() {
        Thread.start {
            mailService.sendMail {
                async true
                from "service@findyi.com"
                to "wufei1310@126.com"
                subject "金士代发财务报表"
                // body new File("src/groovy/report.html").getText()
                html g.render(template: "myMailTemplate")
            }
        }


        render "333";
    }

    def index() {

        render(view: "/member/daiFaOrder/list")
    }

    def delete() {
        def order = DaiFaOrder.findByIdAndStatusAndAdd_user(params.id, "waitpay", session.loginPOJO.user.id)
        order.status = "delete"
        flash.message = "删除成功";

        render(view: this.commonSuccess)
    }

    def closeGoods() {
        try {
            memberDaiFaService.doCloseGoods(params, User.get(session.loginPOJO.user.id))
            flash.message = "商品取消成功，货款已退到余额账户";
            flash.messageClass = "success"
        } catch (Exception e) {
            flash.message = e.getMessage();
            flash.messageClass = "error"
        }
        render(view: this.commonSuccess)
    }

    def chaShipPay() {
        // def daiFaOrder = DaiFaOrder.findByIdAndAdd_user(params.id,session.loginPOJO.user.id)
        //if(params.pay_type == '0'){
        if (!session.loginPOJO.user.safepass) {
            flash.message = "请先设置支付密码"
            flash.messageClass = "error"
            render(view: this.commonSuccess)
            return false
        }
        if (!params.safepass || params.safepass.encodeAsPassword() != session.loginPOJO.user.safepass) {
            flash.message = "支付密码不正确"
            flash.messageClass = "error"
            render(view: this.commonSuccess)
            return false
        }
        try {
            memberDaiFaService.doChaShipPay(params, User.get(session.loginPOJO.user.id))
            flash.message = "补款成功！";
            flash.messageClass = "success"
        } catch (Exception e) {
            flash.message = e.getMessage();
            flash.messageClass = "error"
        }
        render(view: this.commonSuccess)
    }

    def chaPay() {
        // def daiFaOrder = DaiFaOrder.findByIdAndAdd_user(params.id,session.loginPOJO.user.id)
        //if(params.pay_type == '0'){
        if (!session.loginPOJO.user.safepass) {
            flash.message = "请先设置支付密码"
            flash.messageClass = "error"
            render(view: this.commonSuccess)
            return false
        }
        if (!params.safepass || params.safepass.encodeAsPassword() != session.loginPOJO.user.safepass) {
            flash.message = "支付密码不正确"
            flash.messageClass = "error"
            render(view: this.commonSuccess)
            return false
        }
        try {
            memberDaiFaService.doChaPay(params, User.get(session.loginPOJO.user.id))
            flash.message = "补款成功！";
            flash.messageClass = "success"
        } catch (Exception e) {
            flash.message = e.getMessage();
            flash.messageClass = "error"
        }
        render(view: this.commonSuccess)
    }

    def list() {
        if (!params.max) params.max = 10
        if (!params.offset) params.offset = 0
        if (!params.sort) params.sort = "dateCreated"
        if (!params.order) params.order = "desc"

        def searchClosure = {

            if (params.reperson) {
                like('reperson', '%' + params.reperson + '%')
            }

            if (params.orderSN) {
                like('reperson', '%' + params.orderSN + '%')
            }

            if (params.contphone) {
                like('contphone', '%' + params.contphone + '%')
            }
            if (params.status) {
                if (params.status == "haspay") {
                    or {
                        eq('status', "waitaccept")
                        eq('status', "partaccept")
                        eq('status', "allaccept")
                        eq('status', "problem")
                    }


                } else {
                    eq('status', params.status)
                }

            }
            ne("status", "delete")
            eq('add_user', session.loginPOJO.user.id)
        }

        def o = DaiFaOrder.createCriteria();
        def results = o.list(params, searchClosure)

        def map = [list: results, total: results.totalCount]

        render(view: "/member/daiFaOrder/list", model: map)
    }

    def add() {


        def daiFaOrder = DaiFaOrder.findByAdd_user(session.loginPOJO.user.id, [max: 1, sort: "dateCreated", order: "desc", offset: 0])
        if (!daiFaOrder) {
            daiFaOrder = new DaiFaOrder()
        }

        def market = Market.list().market_name

        def map = [daiFaOrder: daiFaOrder, market: market]
        render(view: "/member/daiFaOrder/add", model: map)
    }

    def payDaiFaOrder() {
        def daiFaOrder = DaiFaOrder.findByIdAndAdd_user(params.id, session.loginPOJO.user.id)
        //if(params.pay_type == '0'){
        if (!session.loginPOJO.user.safepass) {
            flash.message = "请先设置支付密码"
            flash.messageClass = "error"
            render(view: this.commonSuccess)
            return false
        }
        if (!params.safepass || params.safepass.encodeAsPassword() != session.loginPOJO.user.safepass) {
            flash.message = "支付密码不正确"
            flash.messageClass = "error"
            render(view: this.commonSuccess)
            return false
        }
        def msg = memberDaiFaService.payDaiFa(daiFaOrder.id)
        if (msg) {
            flash.message = msg
        } else {
            flash.message = "支付成功！我们尽快按您的要求取货，请您每隔一段时间登陆您的账号查看取货状态"
        }
        render(view: this.commonSuccess)
        return false
        // }
    }

    def doAdd() {
        if (params.pay_type == '0') {
            if (!session.loginPOJO.user.safepass) {
                flash.message = "请先设置支付密码"
                flash.messageClass = "error"
                render(view: this.commonSuccess)
                return false
            }
            if (!params.safepass || params.safepass.encodeAsPassword() != session.loginPOJO.user.safepass) {
                flash.message = "支付密码不正确"
                flash.messageClass = "error"
                render(view: this.commonSuccess)
                return false
            }

        }
        def daiFaOrder = new DaiFaOrder(params)
        daiFaOrder.orderSN = (new Date().getTime()).toString();
        daiFaOrder.add_user = session.loginPOJO.user.id
        daiFaOrder.status = "waitpay"
        daiFaOrder.diffFee = 0

        def shichang = ""
        def goodsNum = 0;

        if (params.market instanceof String) {//判断提交一个商品还是多个商品
            def daiFaGoods = new DaiFaGoods(num: params.num, price: params.price);
            daiFaGoods.market = params.market
            daiFaGoods.floor = params.floor
            daiFaGoods.stalls = params.stalls
            daiFaGoods.goods_sn = params.goods_sn
            daiFaGoods.spec = params.spec
            daiFaGoods.status = '0'
            daiFaGoods.is_qianshou = '0'
            daiFaGoods.add_user = session.loginPOJO.user.id
            daiFaGoods.attach_id = RemoteFileUtil.remoteFileCopy(request,params.attach_id)


            daiFaOrder.addToDaiFaGoods(daiFaGoods)

            goodsNum = Integer.parseInt(params.num)
            shichang = params.market
        } else {
            params.market.eachWithIndex { it, i ->
                def daiFaGoods = new DaiFaGoods(num: params.num[i], price: params.price[i]);
                daiFaGoods.market = params.market[i]
                daiFaGoods.floor = params.floor[i]
                daiFaGoods.stalls = params.stalls[i]
                daiFaGoods.goods_sn = params.goods_sn[i]
                daiFaGoods.spec = params.spec[i]
                daiFaGoods.status = '0'
                daiFaGoods.is_qianshou = '0'
                daiFaGoods.add_user = session.loginPOJO.user.id

              //  daiFaGoods.attach_id = params.attach_id[i]
                
                daiFaGoods.attach_id = RemoteFileUtil.remoteFileCopy(request,params.attach_id[i])

                daiFaOrder.addToDaiFaGoods(daiFaGoods)

                if (shichang.indexOf(params.market[i]) < 0)
                    shichang = shichang + params.market[i] + ","
                goodsNum = goodsNum + Integer.parseInt(params.num[i])
            }
        }




        checkOrderFee(daiFaOrder)


        daiFaOrder.save(flush: true);


        def searchClosure = {
            eq("user_type", "admin")
        }

        def o = PushMsg.createCriteria();
        def results = o.list(searchClosure)

//        PushPOJO pushPOJO = new PushPOJO();
//        pushPOJO.title = "新代发订单通知";
//        pushPOJO.content = "test";
//        pushPOJO.content = "订单号："+daiFaOrder.orderSN+"#拿货数量："+goodsNum+
//                            "#拿货市场："+shichang+"#订单状态："+StringUtil.getOrderStatus(daiFaOrder.status)+"#支付时间："+new Date().format('yyyy-MM-dd HH:mm:ss')
//       
//        println pushPOJO.content + "================================"
//        
//        pushPOJO.pushMsgList = results
//        new Push().pushByStore(pushPOJO)


        if (params.pay_type == '0') {
            def msg = memberDaiFaService.payDaiFa(daiFaOrder.id)
            if (msg) {
                flash.message = msg
            } else {
                flash.message = "支付成功！我们尽快按您的要求取货，请您每隔一段时间登陆您的账号查看取货状态"
            }
            flash.messageClass = "success"
            render(view: this.commonSuccess)
            return false
        } else {
            redirect(controller: "memberAlipay", action: "reqPay", params: [payType: "0", orderSN: daiFaOrder.orderSN])
        }

    }

    def show() {

        def order = DaiFaOrder.findByIdAndAdd_user(params.id, session.loginPOJO.user.id)
        def map = [order: order]
        //print order.diffOrder
        render(view: "/member/daiFaOrder/show", model: map)
    }

    def update() {

        def order = DaiFaOrder.findByIdAndAdd_userAndStatus(params.id, session.loginPOJO.user.id, "waitpay")
        def market = Market.list().market_name
        def map = [order: order, market: market]
        render(view: "/member/daiFaOrder/update", model: map)
    }

    def doUpdate() {
        def daiFaOrder = DaiFaOrder.findByIdAndAdd_userAndStatus(params.id, session.loginPOJO.user.id, "waitpay")

        if (daiFaOrder.senddesc != params.senddesc) {
            if (daiFaOrder.h_senddesc) {
                daiFaOrder.h_senddesc = daiFaOrder.h_senddesc + "|" + daiFaOrder.senddesc
            } else {
                daiFaOrder.h_senddesc = daiFaOrder.senddesc
            }
        }

        daiFaOrder.properties = params
        daiFaOrder.add_user = session.loginPOJO.user.id
        daiFaOrder.diffFee = 0

        DaiFaGoods.executeUpdate("delete DaiFaGoods d where d.daiFaOrder = :daiFaOrder", [daiFaOrder: daiFaOrder])



        if (params.market instanceof String) {//判断提交一个商品还是多个商品
            def daiFaGoods = new DaiFaGoods(num: params.num, price: params.price);
            daiFaGoods.market = params.market
            daiFaGoods.floor = params.floor
            daiFaGoods.stalls = params.stalls
            daiFaGoods.goods_sn = params.goods_sn
            daiFaGoods.spec = params.spec
            daiFaGoods.status = '0'
            daiFaGoods.is_qianshou = '0'
            daiFaGoods.add_user = session.loginPOJO.user.id
            daiFaGoods.attach_id = RemoteFileUtil.remoteFileCopy(request,params.attach_id)


            daiFaOrder.addToDaiFaGoods(daiFaGoods)


        } else {
            params.market.eachWithIndex { it, i ->
                def daiFaGoods = new DaiFaGoods(num: params.num[i], price: params.price[i]);
                daiFaGoods.market = params.market[i]
                daiFaGoods.floor = params.floor[i]
                daiFaGoods.stalls = params.stalls[i]
                daiFaGoods.goods_sn = params.goods_sn[i]
                daiFaGoods.spec = params.spec[i]
                daiFaGoods.status = '0'
                daiFaGoods.is_qianshou = '0'
                daiFaGoods.add_user = session.loginPOJO.user.id

                
                daiFaGoods.attach_id = RemoteFileUtil.remoteFileCopy(request,params.attach_id[i])

                daiFaOrder.addToDaiFaGoods(daiFaGoods)


            }
        }



        checkOrderFee(daiFaOrder)



        daiFaOrder.save();




        flash.message = "修改代发订单成功！"
        render(view: this.commonSuccess)
    }

    def updateBeiZhu() {
        def daiFaOrder = DaiFaOrder.findByIdAndAdd_user(params.id, session.loginPOJO.user.id)


        if (daiFaOrder.senddesc != params.beizhu) {
            if (daiFaOrder.h_senddesc) {
                daiFaOrder.h_senddesc = daiFaOrder.h_senddesc + "|" + daiFaOrder.senddesc
            } else {
                daiFaOrder.h_senddesc = daiFaOrder.senddesc
            }
        }

        daiFaOrder.senddesc = params.beizhu

        flash.message = "修改订单备注成功！"
        render(view: this.commonSuccess)
    }

    def acceptAjax() {
        print "=========================1============================="
        render "1"
    }

    def checkShipAjax() {
        render StringUtil.checkShip(params.wuliu, params.area_id, Integer.valueOf(params.num))

    }

//    def checkShip(wuliu,area_id,num){
//        if(area_id.length()>7)
//        area_id = area_id.substring(0,7)
//        def express = Express.findByName(wuliu)
//        def areaShip = AreaShip.findByExpressAndArea_id(express,area_id)
//         print areaShip as JSON
//        if(!areaShip){
//            areaShip = AreaShip.findByExpressAndArea_id(express,"0100")
//        }
//       // print areaShip as JSON
//        if(num<=5){
//           return areaShip.f_price 
//        }else{
//            int f_num = (num-5-1)/5+1
//            return areaShip.f_price + areaShip.x_price*f_num
//        }
//    }

    public void checkOrderFee(daiFaOrder) {
        BigDecimal daifa_free = new BigDecimal(properties.getProperty("daifa.daifa_free"))
        def goods = daiFaOrder.daiFaGoods
        def num = 0
        def ship = 0
        def goodsFee = 0
        def serviceFee = 0
        def regardsFee = 0
        def totalFee = 0
        goods.each {
            num = it.num + num
            goodsFee = goodsFee + it.num * it.price
        }
        def regardsMap = CommonParams.regardsMap
        if (regardsMap.containsKey(daiFaOrder.regards)) {
            regardsFee = regardsMap.get(daiFaOrder.regards)
        }
        ship = StringUtil.checkShip(daiFaOrder.wuliu, daiFaOrder.area_id, num)
        daiFaOrder.goodsFee = goodsFee
        daiFaOrder.serviceFee = daifa_free * num
        daiFaOrder.shipFee = ship
        daiFaOrder.regardsFee = regardsFee
        daiFaOrder.totalFee = daiFaOrder.goodsFee + daiFaOrder.serviceFee + daiFaOrder.shipFee + daiFaOrder.regardsFee
    }

    def toSaleReturn() {
        def daiFaOrder = DaiFaOrder.findByIdAndAdd_userAndStatus(params.id, session.loginPOJO.user.id, "shipped")
        def map = [order: daiFaOrder]
        //print order.diffOrder
        render(view: "/member/saleReturn/saleReturn", model: map)
    }

    def toSaleExchange() {//换货
        def daiFaOrder = DaiFaOrder.findByIdAndAdd_userAndStatus(params.id, session.loginPOJO.user.id, "shipped")
        def market = Market.list().market_name
        def map = [order: daiFaOrder, market: market]
        //print order.diffOrder
        render(view: "/member/saleReturn/saleExchange", model: map)
    }

    def doSaleExchange() {
        if (params.pay_type == '0') {
            if (!session.loginPOJO.user.safepass) {
                flash.message = "请先设置支付密码"
                flash.messageClass = "error"
                render(view: this.commonSuccess)
                return false
            }
            if (!params.safepass || params.safepass.encodeAsPassword() != session.loginPOJO.user.safepass) {
                flash.message = "支付密码不正确"
                flash.messageClass = "error"
                render(view: this.commonSuccess)
                return false
            }

        }

        def addUser = User.get(session.loginPOJO.user.id)

        def returnOrder = memberDaiFaService.doSaleExchange(params, addUser)//添加申请

        if (params.pay_type == '0') {
            def msg = memberDaiFaService.paySaleReturn(returnOrder.id)
            if (msg) {
                flash.message = msg
            } else {
                flash.message = "支付成功！我们会尽快为您处理"
            }
            flash.messageClass = "success"
            render(view: this.commonSuccess)
            return false
        } else {
            redirect(controller: "memberAlipay", action: "reqPay", params: [payType: "3", orderSN: returnOrder.orderSN, body: returnOrder.id])
        }

    }


    def doSaleReturn() {
        if (params.pay_type == '0') {
            if (!session.loginPOJO.user.safepass) {
                flash.message = "请先设置支付密码"
                flash.messageClass = "error"
                render(view: this.commonSuccess)
                return false
            }
            if (!params.safepass || params.safepass.encodeAsPassword() != session.loginPOJO.user.safepass) {
                flash.message = "支付密码不正确"
                flash.messageClass = "error"
                render(view: this.commonSuccess)
                return false
            }

        }

        def addUser = User.get(session.loginPOJO.user.id)
        def returnOrder
        try {
            returnOrder = memberDaiFaService.doSaleReturn(params, addUser)//添加申请
        } catch (MessageException e) {
            flash.message = e.getMessage()
            flash.messageClass = "error"
            if (params.pay_type == '0') {
                render(view: this.commonSuccess)
                return false
            } else {
                render flash.message
                return false
            }
        }


        if (params.pay_type == '0') {
            def msg = memberDaiFaService.paySaleReturn(returnOrder.id)
            if (msg) {
                flash.message = msg
            } else {
                flash.message = "支付成功！我们会尽快为您处理"
            }
            flash.messageClass = "success"
            render(view: this.commonSuccess)
            return false
        } else {
            redirect(controller: "memberAlipay", action: "reqPay", params: [payType: "3", orderSN: returnOrder.orderSN, body: returnOrder.id])
        }

    }

    def toSaleReturnAdd() {
        def market = Market.list().market_name

        def returnOrder = ReturnOrder.findByAdd_user(session.loginPOJO.user.id, [max: 1, sort: "dateCreated", order: "desc", offset: 0])
        if (!returnOrder) {
            returnOrder = new ReturnOrder()
        }

        def map = [market: market, returnOrder: returnOrder]
        render(view: "/member/saleReturn/add", model: map)
    }

    def doSaleReturnAdd() {
        if (params.pay_type == '0') {
            if (!session.loginPOJO.user.safepass) {
                flash.message = "请先设置支付密码"
                flash.messageClass = "error"
                render(view: this.commonSuccess)
                return false
            }
            if (!params.safepass || params.safepass.encodeAsPassword() != session.loginPOJO.user.safepass) {
                flash.message = "支付密码不正确"
                flash.messageClass = "error"
                render(view: this.commonSuccess)
                return false
            }

        }

        def addUser = User.get(session.loginPOJO.user.id)

        def returnOrder = memberDaiFaService.doSaleReturnAdd(params, addUser)//添加申请

        if (params.pay_type == '0') {
            def msg = memberDaiFaService.paySaleReturn(returnOrder.id)
            if (msg) {
                flash.message = msg
            } else {
                flash.message = "支付成功！我们会尽快为您处理"
            }
            flash.messageClass = "success"
            render(view: this.commonSuccess)
            return false
        } else {
            redirect(controller: "memberAlipay", action: "reqPay", params: [payType: "3", orderSN: returnOrder.orderSN, body: returnOrder.id])
        }
    }

    def saleReturnList() {
        if (!params.max) {
            params.max = 10
        } else {
            params.max = new Long(params.max)
        }
        if (!params.offset) params.offset = 0
        params.sort = "dateCreated"
        params.order = "desc"

        def searchClosure = {

            if (params.orderSN) {
                like('orderSN', "%" + params.orderSN + "%")
            }
            if (params.status) {
                if (params.status == '1') {
                    'in'('status', ['1', '4'])
                } else {
                    eq('status', params.status)
                }

            }
            eq("add_user", session.loginPOJO.user.id)
        }

        def o = ReturnOrder.createCriteria();
        def results = o.list(params, searchClosure)

        def map = [list: results, total: results.totalCount]



        render(view: "/member/saleReturn/list", model: map)

    }

    def saleReturnShow() {
        def returnOrder = ReturnOrder.findByIdAndAdd_user(params.id, session.loginPOJO.user.id)
        def map = [returnOrder: returnOrder]
        if (returnOrder.type == '0') {
            render(view: "/member/saleReturn/show", model: map)
        } else {
            render(view: "/member/saleReturn/saleExchangeShow", model: map)
        }

    }

    def paySaleReturn() {
        def returnOrder = ReturnOrder.findByIdAndAdd_user(params.id, session.loginPOJO.user.id)
        //if(params.pay_type == '0'){
        if (!session.loginPOJO.user.safepass) {
            flash.message = "请先设置支付密码"
            flash.messageClass = "error"
            render(view: this.commonSuccess)
            return false
        }
        if (!params.safepass || params.safepass.encodeAsPassword() != session.loginPOJO.user.safepass) {
            flash.message = "支付密码不正确"
            flash.messageClass = "error"
            render(view: this.commonSuccess)
            return false
        }
        def msg = memberDaiFaService.paySaleReturn(returnOrder.id)
        if (msg) {
            flash.message = msg
        } else {
            flash.message = "支付成功！我们会尽快为您处理!"
        }
        render(view: this.commonSuccess)
    }

    def goToReturn(){
        def map = [:]
        render(view: "/member/saleReturn/returnDesc", model: map)
    }


}
