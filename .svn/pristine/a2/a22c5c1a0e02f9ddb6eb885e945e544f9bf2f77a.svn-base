package member

import com.taobao.api.DefaultTaobaoClient
import com.taobao.api.FileItem
import com.taobao.api.TaobaoClient
import com.taobao.api.internal.util.WebUtils
import com.taobao.api.request.ItemAddRequest
import com.taobao.api.request.ItemGetRequest
import com.taobao.api.request.ItemImgUploadRequest
import com.taobao.api.request.ItemSkuAddRequest
import com.taobao.api.response.ItemAddResponse
import com.taobao.api.response.ItemGetResponse
import com.taobao.api.response.ItemImgUploadResponse
import com.taobao.api.response.ItemSkuAddResponse
import grails.converters.JSON
import groovyx.net.http.HTTPBuilder

import java.awt.image.BufferedImage
import javax.imageio.ImageIO;


class MemberNewProductController {

    def isDev = true;


    def getAppKey() {
        if (isDev) {
            return "1023024144"
        } else {
            return "23024144"
        }
    }

    def getAppSecret() {
        if (isDev) {
            return "sandbox138959a9ec941f6ed044dc41b"
        } else {
            return "576761b138959a9ec941f6ed044dc41b"
        }
    }

    def getAuthCodeUrl() {
        if (isDev) {
            return "https://oauth.tbsandbox.com/authorize"
        } else {
            return "https://oauth.taobao.com/authorize"
        }
    }


    def getTokenUrl() {
        if (isDev) {
            return "https://oauth.tbsandbox.com/token"
        } else {
            return "https://oauth.taobao.com/token"
        }
    }

    def getSdkUrl() {
        if (isDev) {
            return "http://gw.api.tbsandbox.com/router/rest"
        } else {
            return "http://eco.taobao.com/router/rest"
        }
    }


    def memberXmlGoodsService;

    def index() {}

    def list() {
        memberXmlGoodsService.init();

        def p = params.p
        if (!p) {
            p = 1
        } else {

        }

        def xmlGoodsList = memberXmlGoodsService.getXmlGoodsList(p as int);
        def map = [xmlGoodsList: xmlGoodsList, p: p]

        render(view: "/member/newProduct/list", model: map)
    }

    def goods() {
        def xmlGoods = memberXmlGoodsService.getXmlGoods(params.id as String)
        def map = [xmlGoods: xmlGoods]

        render(view: "/member/newProduct/detail", model: map)
    }


    def reqTaobao() {
        String baseUrl = "http://" + request.getServerName() + ":" + request.getServerPort()
        String return_url = baseUrl + "${createLink(action: 'taobaoapiredirect_uri')}";
        def url = getAuthCodeUrl() + "?client_id=" + getAppKey() + "&response_type=code&redirect_uri=" + return_url
        redirect(url: url);
    }


    def taobaoapiredirect_uri() {



        if(isDev){
            println "获得淘宝授权码:" + "61027097348dad0a710474b58682666e32470777f5e4ef32074082787"
            session.access_token = "61027097348dad0a710474b58682666e32470777f5e4ef32074082787"
        }else{
            String baseUrl = "http://" + request.getServerName() + ":" + request.getServerPort()
            String return_url = baseUrl + "${createLink(action: 'taobaoapiredirect_uri')}";

            String url = getTokenUrl();
            Map<String, String> props = new HashMap<String, String>();
            props.put("grant_type", "authorization_code");
            /*测试时，需把test参数换成自己应用对应的值*/
            props.put("code", params.code);
            props.put("client_id", getAppKey());
            props.put("client_secret", getAppSecret());
            props.put("redirect_uri", return_url);
            props.put("view", "web");
            String s = "";
            try {
                s = WebUtils.doPost(url, props, 30000, 30000);
                System.out.println(s);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }




}

def getTaobaoGoods() {




    TaobaoClient client = new DefaultTaobaoClient(getSdkUrl(), getAppKey(), getAppSecret());
    ItemGetRequest req = new ItemGetRequest();
    req.setFields("detail_url,num_iid,title,nick,type,cid,seller_cids,props,input_pids,input_str,desc,pic_url,num,valid_thru,list_time,delist_time,stuff_status,location,price,post_fee,express_fee,ems_fee,has_discount,freight_payer,has_invoice,has_warranty,has_showcase,modified,increment,approve_status,postage_id,product_id,auction_point,property_alias,item_img,prop_img,sku,video,outer_id,is_virtual");
    req.setNumIid(params.id);
    ItemGetResponse response = client.execute(req, session.access_token);
    return response
}


def addTaobaoGoods() {



    params.id = 2100554275168;
    ItemGetResponse response = getTaobaoGoods()
//    render response as JSON
//    return


    TaobaoClient client = new DefaultTaobaoClient(getSdkUrl(), getAppKey(), getAppSecret());
    ItemAddRequest req = new ItemAddRequest();
    req.setNum(response.getItem().getNum());
    req.setPrice(response.getItem().getPrice());
    req.setType(response.getItem().getType());
    req.setStuffStatus(response.getItem().getStuffStatus());
    req.setTitle("沙箱测试" + response.getItem().getTitle());
    req.setDesc(response.getItem().getDesc());
    req.setLocationState(response.getItem().getLocation().getState());
    req.setLocationCity(response.getItem().getLocation().getCity());
    req.setCid(response.getItem().getCid());
    req.setHasInvoice(response.getItem().getHasInvoice())
    req.setHasWarranty(response.getItem().getHasWarranty())
    req.setProps(response.getItem().getProps())
    ItemAddResponse addresponse = client.execute(req, session.access_token);



    response.getItem().getSkus().each {
        ItemSkuAddRequest skureq=new ItemSkuAddRequest();
        skureq.setNumIid(addresponse.getItem().getNumIid());
        skureq.setProperties(it.properties);
        skureq.setQuantity(it.quantity);
        skureq.setPrice(it.price);
        skureq.setOuterId(it.outerId);
        ItemSkuAddResponse skurep = client.execute(skureq , session.access_token);
    }


//        response.getItem().getItemImgs().each {
//            println it.url
//            println getUrlByte(it.url)
//
//            FileItem fitem =  new FileItem(it.url,getUrlByte(it.url));
//            ItemImgUploadRequest imgreq = new ItemImgUploadRequest();
//            imgreq.setNumIid(addresponse.getItem().getNumIid());
//            imgreq.setPosition(it.position);
//            imgreq.setImage(fitem);
//
//            ItemImgUploadResponse imgrep = client.execute(imgreq, "61027157348dad0a76826661232f612e32470777f5e4ef32074082787");
//            render imgrep as JSON;
//
//        }


    render "====================="
    render addresponse as JSON;
    return
}




def getUrlByte(imgurl) {
    java.io.BufferedInputStream bis = null;
    java.io.ByteArrayOutputStream baos = null

    try {
        //实例化url
        URL url = new URL(imgurl);
        //载入图片到输入流
        bis = new BufferedInputStream(url.openStream());
        baos = new java.io.ByteArrayOutputStream();
        //实例化存储字节数组
        int buffer = 1024;
        byte[] b = new byte[buffer];
        int n = 0;
        while ((n = bis.read(b, 0, buffer)) > 0) {
            baos.write(b, 0, n);
        }
        bis.close();
        baos.flush();
        baos.close();
        return b
        //关闭输出流
    } catch (Exception e) {
        bis.close();
        baos.flush();
        baos.close();
    } finally {
        bis.close();
        baos.flush();
        baos.close();
    }
}

}

//
//def url = getSdkUrl()+"?access_token="+session.access_token+"&v=2.0&format=json"
//
//def itemgetmap = [:]
//
//itemgetmap.method = "taobao.item.get"
//itemgetmap.num_iid = params.id
//itemgetmap.fields = "detail_url,num_iid,title,nick,type,cid,seller_cids,props,input_pids,input_str,desc,pic_url,num,valid_thru,list_time,delist_time,stuff_status,location,price,post_fee,express_fee,ems_fee,has_discount,freight_payer,has_invoice,has_warranty,has_showcase,modified,increment,approve_status,postage_id,product_id,auction_point,property_alias,item_img,prop_img,sku,video,outer_id,is_virtual"
//
//def itemgeturl = url;
//itemgetmap.each{k,v->
//
//    itemgeturl = itemgeturl + "&" + k + "=" +v
//}
//println "请求淘宝url:"+itemgeturl
//
//HTTPBuilder http = new HTTPBuilder(itemgeturl)
//
//def rep = http.post([:])
//
//println "获取商品信息:"+rep
//println rep.item_get_response.item.num
//println rep.item_get_response.item.price
//println rep.item_get_response.item.type
//println rep.item_get_response.item.stuff_status
//println rep.item_get_response.item.title
////println rep.item_get_response.item.desc
//println rep.item_get_response.item.location
//println rep.item_get_response.item.cid
