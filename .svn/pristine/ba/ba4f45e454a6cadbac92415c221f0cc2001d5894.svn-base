package admin
import ship.DaiFaOrder
import grails.converters.JSON
import ship.MobileMessage
import ship.Pager
import ship.User
import ship.DiffOrder
import ship.DaiFaGoods
import ship.GoodsLog
import ship.Market
import util.StringUtil
import ship.PushPOJO
import util.Push
import ship.PushMsg
import java.text.SimpleDateFormat

class AdminDaiFaGoodsController extends BaseController{
        
    def adminDaiFaGoodsService
    
    def toOrderGoods(){
        def g = DaiFaGoods.get(params.id)
        def diffGoods = g.diffGoods
        def goodsLog = GoodsLog.findAllByDaiFaGoods(g)
            
            

          if(params.mobile=="mobile"){  
              def paramsMap = new HashMap()
                g.properties.each{k,v->
                    paramsMap.put(k,v.toString())
                }
                paramsMap.put('payTime',g.daiFaOrder.payTime)
                paramsMap.put("orderSN",g.daiFaOrder.orderSN)
                paramsMap.put("order_status",g.daiFaOrder.status)
                paramsMap.put("senddesc",g.daiFaOrder.senddesc)
                paramsMap.put("h_senddesc",g.daiFaOrder.h_senddesc)
                paramsMap.put("id",g.id)
                if(g.daifa_user){
                    paramsMap.put("df_user_id",g.daifa_user.id)
                    paramsMap.put('daifa_user_name',g.daifa_user.email)
                }
                  
                def mm = new MobileMessage()
                mm.message = "获得代发商品成功"
                mm.result = "success"
                mm.model.put("ordergoods",paramsMap)
                render mm as JSON
                return;
             }else{
                 def map = [daiFaGoods: g,diffGoodsList:diffGoods,goodsLogList:goodsLog]
                 render(view: "/admin/daiFaGoods/show",model:map)
             }

        
    }
    
    def showMy(){
        def g = DaiFaGoods.get(params.id)
        def diffGoods = g.diffGoods
        def goodsLog  = GoodsLog.findAllByDaiFaGoods(g)
        def map = [daiFaGoods: g,diffGoodsList:diffGoods,goodsLogList:goodsLog]
        render(view: "/admin/daiFaGoods/showMy",model:map)
    }
    

    
    def orderGoodsDiff(){
        def g = DaiFaGoods.get(params.id)
        def diffGoods = g.diffGoods
        if(params.mobile=="mobile"){  
            
            
            def paramsMap = new HashMap()
            g.properties.each{k,v->
                paramsMap.put(k,v.toString())
            }
            paramsMap.put('id',g.id)
            paramsMap.put('orderSN',g.daiFaOrder.orderSN)
            if(g.daifa_user){
                paramsMap.put('daifa_user_name',g.daifa_user.email)
            }else{
                paramsMap.put('daifa_user_name',null)
            }
            if(g.check_user){
                paramsMap.put('check_user_name',g.check_user.email)
            }else{
                paramsMap.put('check_user_name',null)
            }
            
            
            def mm = new MobileMessage()
            mm.message = "获得代发商品补差价列表成功"
            mm.result = "success"
            mm.model.put("daifaGoods",paramsMap)
            mm.model.put("diffGoods",diffGoods)
            render mm as JSON
            return;
        }
        
    }
    
    
    def index() { }
    
    
    def list() { 
        

        def searchMarket =  {
            
           user{
               eq("id",session.loginPOJO.user.id)
           }
        }
        def marketList = Market.createCriteria().list(searchMarket).market_name
        
        if (!params.max) {
            params.max = 10  
        }else{
            params.max = new Long(params.max)
        }
        if (!params.offset) params.offset = 0  
        params.sort = "dateCreated"  
        params.order = "desc" 
        
        def results = []
        def map
        if(marketList){
                def searchClosure =  {


                if(params.goods_sn){
                    like('goods_sn',"%"+params.goods_sn+"%")
                }
                if(params.market){
                    like('market',"%"+params.market+"%")
                    params.sort = "floor"  
                    params.order = "desc" 
                }
                if(params.status){
                    eq("status",params.status)
                }
                daiFaOrder{
                    ne("status","delete")
                    ne("status","waitpay")
                    if(params.orderSN){
                        like('orderSN',"%"+params.orderSN+"%")
                    }
                }
                if(params.email){
                    daifa_user{
                        like('email',"%"+params.email+"%")
                    }
                }

              
                    'in'("market",marketList)
               


            }
        
            def o = DaiFaGoods.createCriteria();
            results = o.list(params,searchClosure)
            map = [list: results, total: results.totalCount]
        }else{
            map = [list: results, total: 0]
        }
        
        map.marketList =  marketList
        
    
        
        if(params.mobile=="mobile"){
            List m_result = new ArrayList()

            results.each{it->
                def paramsMap = new HashMap()
                it.properties.each{k,v->
                    paramsMap.put(k,v.toString())
                }
                paramsMap.put('payTime',it.daiFaOrder.payTime)
                paramsMap.put('id',it.id)
                paramsMap.put('orderSN',it.daiFaOrder.orderSN)
                if(it.daifa_user){
                    paramsMap.put('daifa_user_name',it.daifa_user.email)
                }else{
                    paramsMap.put('daifa_user_name',null)
                }
                if(it.check_user){
                    paramsMap.put('check_user_name',it.check_user.email)
                }else{
                    paramsMap.put('check_user_name',null)
                }
                m_result.add(paramsMap)
            }
            map.list = m_result
            //封装分页传给手机端
            def pager = new Pager(max:params.max,"offset":params.offset,"totalPage":((map.total-1)/params.max + 1) as int ,total:map.total)
            map.put("pager",pager)
            
            def mm = new MobileMessage()
            mm.message = "获取商品列表成功"
            mm.result = "success"
            mm.model = map
            
            render mm as JSON
        }else{
            render(view: "/admin/daiFaGoods/list",model:map)
        }
        
    }
    
    
    def myList(){
        

        def searchMarket =  {
            
           user{
               eq("id",session.loginPOJO.user.id)
           }
        }
        def marketList = Market.createCriteria().list(searchMarket).market_name
        
        if (!params.max) {
            params.max = 10  
        }else{
            params.max = new Long(params.max)
        }
        if (!params.offset) params.offset = 0  
        if (!params.sort) params.sort = "dateCreated"  
        if (!params.order) params.order = "desc" 
        
        def searchClosure =  {
            
           
            if(params.goods_sn){
                like('goods_sn',"%"+params.goods_sn+"%")
            }
            if(params.market){
                like('market',"%"+params.market+"%")
            }
            if(params.orderSN){
                daiFaOrder{
                    
                   like('orderSN',"%"+params.orderSN+"%")
                }
            }
            if(params.status){
                if(params.mobile=="mobile" && params.status == '100'){
                    or{
                     eq("status","2")
                    eq("status","3")
                    eq("status","8")
                     }
                }else{
                    eq("status",params.status)
                }
                
            }
            daifa_user{
                eq("id",session.loginPOJO.user.id)
            }
        }
        
        def o = DaiFaGoods.createCriteria();
        def results = o.list(params,searchClosure)
        
        def map = [list: results, total: results.totalCount,marketList:marketList]
    
        
        if(params.mobile=="mobile"){
            
            //如果是已受理商品，传送价格总数
            if(params.status == '1'){
                def shouli_amount = DaiFaGoods.executeQuery("select sum(d.price*d.num) as amount from DaiFaGoods d " +
                     "where d.status = '1' and d.daifa_user = ?",[User.get(session.loginPOJO.user.id)])[0]
                map.shouli_amount = shouli_amount
            }
            
            List m_result = new ArrayList()
            results.each{it->
                def paramsMap = new HashMap()
                it.properties.each{k,v->
                    paramsMap.put(k,v.toString())
                }
                paramsMap.put('payTime',it.daiFaOrder.payTime)
                paramsMap.put('id',it.id)
                paramsMap.put('orderSN',it.daiFaOrder.orderSN)
                if(it.daifa_user){
                    paramsMap.put('daifa_user_name',it.daifa_user.email)
                }else{
                    paramsMap.put('daifa_user_name',null)
                }
                if(it.check_user){
                    paramsMap.put('check_user_name',it.check_user.email)
                }else{
                    paramsMap.put('check_user_name',null)
                }
                m_result.add(paramsMap)
            }
            map.list = m_result
            
            
            //封装分页传给手机端
            def pager = new Pager(max:params.max,"offset":params.offset,"totalPage":((results.totalCount-1)/params.max + 1) as int ,total:results.totalCount)
            map.put("pager",pager)
            
            def mm = new MobileMessage()
            mm.message = "获取商品列表成功"
            mm.result = "success"
            mm.model = map
            
            render mm as JSON
        }else{
            render(view: "/admin/daiFaGoods/mylist",model:map)
        }
    }
    
    def process(){
        def o = DaiFaGoods.createCriteria();
         def goods = o.get{
            eq("status", "0") 
            eq("id", new Long(params.id)) 
            lock:true 
        }
        
        
        if(!goods){
            flash.message="商品已受理";
            flash.messageClass=this.error
        }else{
            goods.status = "1"
            goods.processtime = new Date()
            goods.daifa_user = User.get(session.loginPOJO.user.id)
            flash.message="商品受理成功";
            flash.messageClass=this.success
            goods.save();
            
            def goodsLog = new GoodsLog();
            goodsLog.daiFaGoods = goods
            goodsLog.addUser = goods.daifa_user
            goodsLog.logdesc = "已受理"
            goodsLog.save()
        }
        if(params.mobile=="mobile"){    
            
            def mm = new MobileMessage()
            mm.message = flash.message
            if(flash.messageClass==this.error){
                mm.result = "fail"
            }else{
                 mm.result = "success"
            
            

                    def paramsMap = new HashMap()
                    goods.properties.each{k,v->
                        paramsMap.put(k,v.toString())
                    }
                    paramsMap.put("orderSN",goods.daiFaOrder.orderSN)
                    paramsMap.put("id",goods.id)



                    mm.model.put("ordergoods",paramsMap)
            }
            render mm as JSON
        }else{
            render(view:this.commonSuccess)
            // redirect(action: "list", params: params)
            return 
        }
    }

    
    def nahuo(){
        def o = DaiFaGoods.createCriteria();
        def goods = o.get{eq("status", "1") eq("id", new Long(params.id)) }
        
        
        if(!goods || goods.daifa_user.id != session.loginPOJO.user.id){
            flash.message="拿货出错";
            flash.messageClass=this.error
        }else{
            goods.status = "2"
            goods.actual_price = new BigDecimal(params.actual_price)
            goods.nahuotime = new Date()
            flash.message="商品拿货成功";
            flash.messageClass=this.success
            goods.save();
           
            def goodsLog = new GoodsLog();
            goodsLog.daiFaGoods = goods
            goodsLog.addUser = goods.daifa_user
            goodsLog.logdesc = "已拿货,实际单价"+goods.actual_price
            goodsLog.save()
        }
        if(params.mobile=="mobile"){    
            
            def paramsMap = new HashMap()
            goods.properties.each{k,v->
                paramsMap.put(k,v.toString())
            }
            paramsMap.put("orderSN",goods.daiFaOrder.orderSN)
            paramsMap.put("id",goods.id)
            
            
            def mm = new MobileMessage()
            mm.message = flash.message
            mm.result = "success"
            mm.model.put("ordergoods",paramsMap)
            render mm as JSON
        }else{
            render(view:this.commonSuccess)
            // redirect(action: "list", params: params)
            return 
        }
    }
    
    def noNahuo(){
        def o = DaiFaGoods.createCriteria();
        def goods = o.get{eq("status", "1") eq("id", new Long(params.id)) }
        
        
        if(!goods || goods.daifa_user.id != session.loginPOJO.user.id){
            flash.message="操作出错";
            flash.messageClass=this.error
        }else{
            goods.status = "3"
            goods.actual_price = new BigDecimal(params.actual_price)
            //goods.nahuotime = new Date()
            flash.message="操作成功";
            flash.messageClass=this.success
            goods.save();
            
            //暂时价格过高修改状态
            def order = goods.daiFaOrder
            def goodsStatusList = order.daiFaGoods.status
            def o_status = StringUtil.getOrderStatusByGoods(goodsStatusList)
            order.status = o_status
            
            def goodsLog = new GoodsLog();
            goodsLog.daiFaGoods = goods
            goodsLog.addUser = goods.daifa_user
            goodsLog.logdesc = "商品价格过高，暂不拿货，实际单价"+goods.actual_price
            goodsLog.save()
            
            //价格过高推送
            def poSearchClosure =  {
                eq("user_type", "admin")
                eq("role", "admin")
            }
            def po = PushMsg.createCriteria();
            def results = po.list(poSearchClosure)
   
            
            PushPOJO pushPOJO = new PushPOJO();
            pushPOJO.title = "订单号："+order.orderSN+"出现问题";
            pushPOJO.content = "订单号："+order.orderSN+"#商品货号："+goods.goods_sn+"#价格过高，暂不拿货，请尽快处理";
            println "=================="
            println pushPOJO.content
            pushPOJO.pushMsgList = results
            new Push().pushByStore(pushPOJO)
            
        }
        if(params.mobile=="mobile"){    
            
            def paramsMap = new HashMap()
            goods.properties.each{k,v->
                paramsMap.put(k,v.toString())
            }
            paramsMap.put("orderSN",goods.daiFaOrder.orderSN)
            paramsMap.put("id",goods.id)
            
            
            def mm = new MobileMessage()
            mm.message = flash.message
            mm.result = "success"
            mm.model.put("ordergoods",paramsMap)
            render mm as JSON
        }else{
            render(view:this.commonSuccess)
            // redirect(action: "list", params: params)
            return 
        }
    }
    
    def bukuan(){
       
        def goods 
        try{
            goods = adminDaiFaGoodsService.doBukuan(params,User.get(session.loginPOJO.user.id))
            flash.message = "提交补款成功"
            flash.messageClass=this.success
            
        }catch(Exception e){
            flash.message = e.getMessage()
            flash.messageClass=this.error
        }
        if(params.mobile=="mobile"){
            if(flash.messageClass == this.success){
                def paramsMap = new HashMap()
                goods.properties.each{k,v->
                    paramsMap.put(k,v.toString())
                }
                paramsMap.put("orderSN",goods.daiFaOrder.orderSN)
                paramsMap.put("id",goods.id)


                def mm = new MobileMessage()
                mm.message = flash.message
                mm.result = "success"
                mm.model.put("ordergoods",paramsMap)
                render mm as JSON
            }else{
                def mm = new MobileMessage()
                mm.message = flash.message
                mm.result = "fail"
                mm.model.put("ordergoods",goods)
                render mm as JSON
            }
                

        }else{
            render(view:this.commonSuccess)
            // redirect(action: "list", params: params)
            return 
        }
    }
    
    def zsquehuo(){
         def o = DaiFaGoods.createCriteria();
        def goods = o.get{eq("status", "1") eq("id", new Long(params.id)) }
        
        
        if(!goods || goods.daifa_user.id != session.loginPOJO.user.id){
            flash.message="操作出错";
            flash.messageClass=this.error
        }else{
            goods.status = "8"
            goods.shuoming = params.shuoming
            //goods.actual_price = new BigDecimal(params.actual_price)
            //goods.nahuotime = new Date()
            flash.message="操作成功";
            flash.messageClass=this.success
            goods.save();
            
            //暂时缺货修改状态
            def order = goods.daiFaOrder
            def goodsStatusList = order.daiFaGoods.status
            def o_status = StringUtil.getOrderStatusByGoods(goodsStatusList)
            order.status = o_status
           
            def goodsLog = new GoodsLog();
            goodsLog.daiFaGoods = goods
            goodsLog.addUser = goods.daifa_user
            goodsLog.logdesc = "缺货，暂不拿货"
            goodsLog.save()
            
            //价格过高推送
            def poSearchClosure =  {
                eq("user_type", "admin")
                eq("role", "admin")
            }
            def po = PushMsg.createCriteria();
            def results = po.list(poSearchClosure)
   
            
            PushPOJO pushPOJO = new PushPOJO();
            pushPOJO.title = "订单号："+order.orderSN+"出现问题";
            pushPOJO.content = "订单号："+order.orderSN+"#商品货号："+goods.goods_sn+"#缺货，暂不拿货，请尽快处理";
            println "=================="
            println pushPOJO.content
            pushPOJO.pushMsgList = results
            new Push().pushByStore(pushPOJO)
            
        }
        if(params.mobile=="mobile"){    
            
            def paramsMap = new HashMap()
            goods.properties.each{k,v->
                paramsMap.put(k,v.toString())
            }
            paramsMap.put("orderSN",goods.daiFaOrder.orderSN)
            paramsMap.put("id",goods.id)
            
            
            def mm = new MobileMessage()
            mm.message = flash.message
            mm.result = "success"
            mm.model.put("ordergoods",paramsMap)
            render mm as JSON
        }else{
            render(view:this.commonSuccess)
            // redirect(action: "list", params: params)
            return 
        }
    }
    
    def yanshou(){
        def goods
         try{
            goods = adminDaiFaGoodsService.doYanshou(params,User.get(session.loginPOJO.user.id))
            flash.message = "验收成功"
            flash.messageClass=this.success
            
        }catch(Exception e){
            flash.message = e.getMessage()
            flash.messageClass=this.error
        }
        if(params.mobile=="mobile"){   
            
            
             def mm = new MobileMessage()
             mm.message = flash.message
            if(flash.messageClass==this.success){
                 def paramsMap = new HashMap()
                  goods.properties.each{k,v->
                    paramsMap.put(k,v.toString())
                 }
                paramsMap.put("orderSN",goods.daiFaOrder.orderSN)
                paramsMap.put("id",goods.id)
                mm.result = "success"
                mm.model.put("ordergoods",paramsMap)
            }else{
                 mm.result = "fail"
                 mm.model.put("ordergoods",null)
            }
            render mm as JSON
            
        }else{
            render(view:this.commonSuccess)
            // redirect(action: "list", params: params)
            return 
        }
    }
    
    def quehuo(){
        def goods
         try{
            goods = adminDaiFaGoodsService.doQuehuo(params,User.get(session.loginPOJO.user.id))
            flash.message = "确认缺货成功"
            flash.messageClass=this.success
            
        }catch(Exception e){
            flash.message = e.getMessage()
            flash.messageClass=this.error
        }
        if(params.mobile=="mobile"){   
            
            
             def mm = new MobileMessage()
             mm.message = flash.message
            if(flash.messageClass==this.success){
                 def paramsMap = new HashMap()
                  goods.properties.each{k,v->
                    paramsMap.put(k,v.toString())
                 }
                paramsMap.put("orderSN",goods.daiFaOrder.orderSN)
                paramsMap.put("id",goods.id)
                mm.result = "success"
                mm.model.put("ordergoods",paramsMap)
            }else{
                 mm.result = "fail"
                 mm.model.put("ordergoods",null)
            }
            render mm as JSON
            
        }else{
            render(view:this.commonSuccess)
            // redirect(action: "list", params: params)
            return 
        }
    }
    
    def noQuehuo(){
        def o = DaiFaGoods.createCriteria();
        def goods = o.get{eq("status", "8") eq("id", new Long(params.id)) }
        
        
        if(!goods || session.loginPOJO.user.role != 'admin'){
            flash.message="操作出错";
            flash.messageClass=this.error
        }else{
            goods.status = "0"
            goods.daifa_user = null
            goods.processtime = null
            goods.actual_price = null
            goods.shuoming = params.shuoming
            
           // goods.actual_price = new BigDecimal(params.actual_price)
            //goods.nahuotime = new Date()
            flash.message="取消缺货操作成功";
            flash.messageClass=this.success
            goods.save();
            
            def order = goods.daiFaOrder
            def goodsStatusList = order.daiFaGoods.status
            def o_status = StringUtil.getOrderStatusByGoods(goodsStatusList)
            order.status = o_status
            
            def goodsLog = new GoodsLog();
            goodsLog.daiFaGoods = goods
            goodsLog.addUser = User.get(session.loginPOJO.user.id)
            goodsLog.logdesc = "取消缺货，商品等待重新受理"
            goodsLog.save()
        }
        if(params.mobile=="mobile"){    
            
            def paramsMap = new HashMap()
            goods.properties.each{k,v->
                paramsMap.put(k,v.toString())
            }
            paramsMap.put("orderSN",goods.daiFaOrder.orderSN)
            paramsMap.put("id",goods.id)
            
            
            def mm = new MobileMessage()
            mm.message = flash.message
            mm.result = "success"
            mm.model.put("ordergoods",paramsMap)
            render mm as JSON
        }else{
            render(view:this.commonSuccess)
            // redirect(action: "list", params: params)
            return 
        }
    }
    
    def noBukuan(){
        def o = DaiFaGoods.createCriteria();
        def goods = o.get{eq("status", "3") eq("id", new Long(params.id)) }
        
        
        if(!goods || session.loginPOJO.user.role != 'admin'){
            flash.message="操作出错";
            flash.messageClass=this.error
        }else{
            goods.status = "0"
            goods.daifa_user = null
            goods.processtime = null
            goods.actual_price = null
           // goods.actual_price = new BigDecimal(params.actual_price)
            //goods.nahuotime = new Date()
            flash.message="取消补款操作成功";
            flash.messageClass=this.success
            goods.save();
            
            def order = goods.daiFaOrder
            def goodsStatusList = order.daiFaGoods.status
            def o_status = StringUtil.getOrderStatusByGoods(goodsStatusList)
            order.status = o_status
            
            def goodsLog = new GoodsLog();
            goodsLog.daiFaGoods = goods
            goodsLog.addUser = User.get(session.loginPOJO.user.id)
            goodsLog.logdesc = "取消补款，商品等待重新受理"
            goodsLog.save()
        }
        if(params.mobile=="mobile"){    
            
            def paramsMap = new HashMap()
            goods.properties.each{k,v->
                paramsMap.put(k,v.toString())
            }
            paramsMap.put("orderSN",goods.daiFaOrder.orderSN)
            paramsMap.put("id",goods.id)
            
            
            def mm = new MobileMessage()
            mm.message = flash.message
            mm.result = "success"
            mm.model.put("ordergoods",paramsMap)
            render mm as JSON
        }else{
            render(view:this.commonSuccess)
            // redirect(action: "list", params: params)
            return 
        }
    }
   
    def daifaMarketList(){
        
        def searchMarket =  {
            
           user{
               eq("id",session.loginPOJO.user.id)
           }
        }
        def marketList = Market.createCriteria().list(searchMarket)
        List m_result = new ArrayList()
        
        def map = [:]
        
        marketList.each{
            def param = [:]
            param.name = it.market_name
            param.count = DaiFaGoods.executeQuery("select count(a.id) from DaiFaGoods a join a.daiFaOrder d where a.market = ? and a.status='0' and d.status<>'delete' and  d.status<>'waitpay'", [it.market_name])[0]
            m_result.add(param)
        }
        map.marketList = m_result
//        map.dsd = DaiFaGoods.executeQuery("select count(a.id) from DaiFaGoods a join a.daiFaOrder d where a.market = ? and a.status='0' and d.status<>'delete' and  d.status<>'waitpay'", ['大时代'])[0]
//        map.bh = DaiFaGoods.executeQuery("select count(a.id) from DaiFaGoods a join a.daiFaOrder d where a.market = ? and a.status='0' and d.status<>'delete' and  d.status<>'waitpay'", ['宝华'])[0]
//        map.nrj = DaiFaGoods.executeQuery("select count(a.id) from DaiFaGoods a join a.daiFaOrder d where a.market = ? and a.status='0' and d.status<>'delete' and  d.status<>'waitpay'", ['女人街'])[0]
//        map.dxh = DaiFaGoods.executeQuery("select count(a.id) from DaiFaGoods a join a.daiFaOrder d where a.market = ? and a.status='0' and d.status<>'delete' and  d.status<>'waitpay'", ['大西豪'])[0]
//        map.xj = DaiFaGoods.executeQuery("select count(a.id) from DaiFaGoods a join a.daiFaOrder d where a.market = ? and a.status='0' and d.status<>'delete' and  d.status<>'waitpay'", ['西街'])[0]
//        map.fl = DaiFaGoods.executeQuery("select count(a.id) from DaiFaGoods a join a.daiFaOrder d where a.market = ? and a.status='0' and d.status<>'delete' and  d.status<>'waitpay'", ['富丽'])[0]
//        map.jm = DaiFaGoods.executeQuery("select count(a.id) from DaiFaGoods a join a.daiFaOrder d where a.market = ? and a.status='0' and d.status<>'delete' and  d.status<>'waitpay'", ['金马'])[0]
//        map.jzx = DaiFaGoods.executeQuery("select count(a.id) from DaiFaGoods a join a.daiFaOrder d where a.market = ? and a.status='0' and d.status<>'delete' and  d.status<>'waitpay'", ['机筑巷'])[0]
//        map.gd = DaiFaGoods.executeQuery("select count(a.id) from DaiFaGoods a join a.daiFaOrder d where a.market = ? and a.status='0' and d.status<>'delete' and  d.status<>'waitpay'", ['国大'])[0]
//        map.gzz = DaiFaGoods.executeQuery("select count(a.id) from DaiFaGoods a join a.daiFaOrder d where a.market = ? and a.status='0' and d.status<>'delete' and  d.status<>'waitpay'", ['广州站'])[0]
//        map.xcd = DaiFaGoods.executeQuery("select count(a.id) from DaiFaGoods a join a.daiFaOrder d where a.market = ? and a.status='0' and d.status<>'delete' and  d.status<>'waitpay'", ['新潮都'])[0]
//        
//        map.bm = DaiFaGoods.executeQuery("select count(a.id) from DaiFaGoods a join a.daiFaOrder d where a.market = ? and a.status='0' and d.status<>'delete' and  d.status<>'waitpay'", ['柏美'])[0]
//        map.ff = DaiFaGoods.executeQuery("select count(a.id) from DaiFaGoods a join a.daiFaOrder d where a.market = ? and a.status='0' and d.status<>'delete' and  d.status<>'waitpay'", ['非凡'])[0]
//        map.ym = DaiFaGoods.executeQuery("select count(a.id) from DaiFaGoods a join a.daiFaOrder d where a.market = ? and a.status='0' and d.status<>'delete' and  d.status<>'waitpay'", ['益民'])[0]
//        map.br = DaiFaGoods.executeQuery("select count(a.id) from DaiFaGoods a join a.daiFaOrder d where a.market = ? and a.status='0' and d.status<>'delete' and  d.status<>'waitpay'", ['佰润'])[0]
//        
        
       // map.shipped = DaiFaGoods.executeQuery("select count(a.id) from DaiFaGoods a join a.daiFaOrder d where  a.status='9' and a.daifa_user =?  and d.status<>'delete' and  d.status<>'waitpay'", [User.get(session.loginPOJO.user.id)])[0]
        
        def searchClosure =  {
            rowCount()
            or{
                 eq("status","2")
                    eq("status","3")
                    eq("status","8")
            }
                   
            daifa_user{
                eq('id',session.loginPOJO.user.id)
            }
        }
        def o = DaiFaGoods.createCriteria();
        def results = o.list(params,searchClosure)
        
        map.shouli = results[0]
        
        searchClosure =  {
            rowCount()
            isNotNull('checktime')//已验收的商品
            daifa_user{
                eq('id',session.loginPOJO.user.id)
            }
        }
        o = DaiFaGoods.createCriteria();
        results = o.list(params,searchClosure)
        map.yanshou = results[0]
        
        
        searchClosure =  {
            rowCount()
            eq('status','1')
            daifa_user{
                eq('id',session.loginPOJO.user.id)
            }
        }
        o = DaiFaGoods.createCriteria();
        results = o.list(params,searchClosure)
        map.owngoods = results[0]
        
        def mm = new MobileMessage()
        mm.message = "获得市场列表成功"
        mm.result = "success"
        mm.model = map
        render mm as JSON
    }
    
    
      def qianshouList() { 
        

        
        
        if (!params.max) {
            params.max = 10  
        }else{
            params.max = new Long(params.max)
        }
        if (!params.offset) params.offset = 0  
        params.sort = "dateCreated"  
        params.order = "desc" 
        

      
             def searchClosure =  {

                daiFaOrder{

                    if(params.orderSN){
                        like('orderSN',"%"+params.orderSN+"%")
                    }
                   
                }
                
                daifa_user{
                        if(params.email){
                         like('email',"%"+params.email+"%")
                        }
                }
                  if(params.start_date){
                         ge('checktime',Date.parse("yyyy-MM-dd HH:mm:ss",params.start_date+" 00:00:00"))
                    }
                    if(params.end_date){
                         le('checktime',Date.parse("yyyy-MM-dd HH:mm:ss",params.end_date+" 23:59:59"))
                    }
                    if(params.is_qianshou){
                         eq("is_qianshou",params.is_qianshou)
                    }
                  or{
                      eq("status","9")
                      eq("status","10")               
                  }
                  //eq("is_qianshou","0")
            }
        
            def o = DaiFaGoods.createCriteria();
            def results = o.list(params,searchClosure)
            def map = [list: results, total: results.totalCount]
       
      
            render(view: "/admin/daiFaGoods/qianshouList",model:map)
  
        
    }
    
    def explorQianshou(){
           def searchClosure =  {
                or{
                      eq("status","9")
                      eq("status","10")               
                  }
                  daiFaOrder{
                      
                  }
                  daifa_user{
                      
                  }
                  eq("is_qianshou","0")
            }
            SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
	    String nowDate = df.format(new Date())
            def o = DaiFaGoods.createCriteria();
            def goods = o.list(searchClosure)
            Map daifaMap = new HashMap()
            Map xiaojiMap = new HashMap()
            goods.each{
                if(daifaMap.containsKey(it.daifa_user.email)){
                    def goodsList = daifaMap.get(it.daifa_user.email)
                    goodsList.add(it)
                    
                    def xiaoji = xiaojiMap.get(it.daifa_user.email)
                    xiaoji = xiaoji + it.num*it.actual_price
                    xiaojiMap.put(it.daifa_user.email,xiaoji)
                }else{
                    def goodsList = new ArrayList()
                    goodsList.add(it)
                    daifaMap.put(it.daifa_user.email,goodsList)
                    
                    def xiaoji = new BigDecimal(0)
                    xiaoji = xiaoji + it.num*it.actual_price
                    xiaojiMap.put(it.daifa_user.email,xiaoji)
                }
            }
            def map = [daifaMap:daifaMap,xiaojiMap:xiaojiMap,nowDate:nowDate]
           render(view: "/admin/daiFaGoods/explorQianshou",model:map)
    }
    
//    def doQianshou(){
//        def o = DaiFaGoods.createCriteria();
//        def goods = o.get{  eq("is_qianshou","0")  eq("id", new Long(params.id)) or{eq("status", "9") eq("status", "10")}}
//        
//        
//        if(!goods || session.loginPOJO.user.role != 'admin'){
//            flash.message="操作出错";
//            flash.messageClass=this.error
//        }else{
//            goods.is_qianshou = '1'
//            goods.qianshou_user = User.get(session.loginPOJO.user.id)
//            goods.qianshoutime = new Date()
//           // goods.actual_price = new BigDecimal(params.actual_price)
//            //goods.nahuotime = new Date()
//            flash.message="签收成功";
//            flash.messageClass=this.success
//            goods.save();
//
//        }
//       
//            render(view:this.commonSuccess)
//
//    }
    
    def yanshouList(){
        if (!params.max) {
            params.max = 10  
        }else{
            params.max = new Long(params.max)
        }
        if (!params.offset) params.offset = 0  
        if (!params.sort) params.sort = "checktime"  
        if (!params.order) params.order = "desc" 
        def map = [:]
        if(params.checktime){
 
            def searchClosure =  {
                daifa_user{
                    eq("id",session.loginPOJO.user.id)
                }
                    

                    between('checktime',Date.parse("yyyy-MM-dd HH:mm:ss",params.checktime+' 00:00:00'), Date.parse("yyyy-MM-dd HH:mm:ss",params.checktime+' 23:59:59'))
                
            }

            

            def o = DaiFaGoods.createCriteria();
            def results = o.list(params,searchClosure)
            map = [list: results, total: results.totalCount]     
            
            List m_result = new ArrayList()

            results.each{it->
                def paramsMap = new HashMap()
                it.properties.each{k,v->
                    paramsMap.put(k,v.toString())
                }
                paramsMap.put('payTime',it.daiFaOrder.payTime)
                paramsMap.put('id',it.id)
                paramsMap.put('orderSN',it.daiFaOrder.orderSN)
                
                m_result.add(paramsMap)
            }
            map.list = m_result
            
            
        }else{
            
            
            def results = new ArrayList();
            def daiFaGoods = DaiFaGoods.executeQuery("select sum(d.num) as num,sum(d.actual_price*d.num) as amount,d.checktime,d.is_qianshou from DaiFaGoods d " +
                     "where d.checktime is not null and d.daifa_user =?  group by substring(d.checktime,1,10) order by d.checktime desc",[User.get(session.loginPOJO.user.id)],
                [max: params.max, offset: params.offset])
            def total = DaiFaGoods.executeQuery("select d.id from DaiFaGoods d " +
                     "where d.checktime is not null and d.daifa_user =?  group by substring(d.checktime,1,10)",[User.get(session.loginPOJO.user.id)]).size()
            daiFaGoods.each{ it ->
                Map paramMap = new HashMap()
                paramMap.num = it[0]
                paramMap.amount = it[1]
                paramMap.checktime = it[2].toString().substring(0,10)
                paramMap.is_qianshou = it[3]
                if(!paramMap.is_qianshou){
                    paramMap.is_qianshou = "0"
                }
                paramMap.status = '7'
                results.add(paramMap)
            }
            map = [list: results, total: total]
        }
        //封装分页传给手机端
        def pager = new Pager(max:params.max,"offset":params.offset,"totalPage":((map.total-1)/params.max + 1) as int ,total:map.total)
        map.put("pager",pager)
        
        def mm = new MobileMessage()
        mm.message = "获取验收列表成功"
        mm.result = "success"
        mm.model = map
        render mm as JSON
       
    }
    
    def qianshouMobile(){
        if (!params.max) {
            params.max = 10  
        }else{
            params.max = new Long(params.max)
        }
        if (!params.offset) params.offset = 0  
        if (!params.sort) params.sort = "checktime"  
        if (!params.order) params.order = "desc" 
        def map = [:]
        if(params.checktime){
            
            def member_map = new TreeMap();
            
            
            def daiFaGoods = DaiFaGoods.findAllByChecktimeBetween(Date.parse("yyyy-MM-dd HH:mm:ss",params.checktime+' 00:00:00'), Date.parse("yyyy-MM-dd HH:mm:ss",params.checktime+' 23:59:59'))
            

            daiFaGoods.each{it->
                def amount = new BigDecimal(0)
                def num = 0
                def user_name = it.daifa_user.email
                def is_qianshou = it.is_qianshou?it.is_qianshou:"0"
                if(member_map.containsKey(user_name)){
                    def param_map = member_map.get(user_name)
                    amount = param_map.amount + it.actual_price*it.num
                    num = param_map.num + it.num
                    param_map.amount = amount
                    param_map.num = num
                }else{
                    def param_map = [:]
                    amount = it.actual_price*it.num
                    num = it.num
                    param_map.amount = amount
                    param_map.num = num
                    param_map.is_qianshou = is_qianshou
                    if(is_qianshou == '2'){
                        param_map.qianshou_user_name = it.qianshou_user.email
                        param_map.qianshoutime = it.qianshoutime
                    }
                    param_map.checktime = params.checktime
                    param_map.daifa_user_id = it.daifa_user.id
                    member_map.put(user_name,param_map)
                }
            }
            
            def result = new ArrayList()
            member_map.each{k,v ->
                def list_map = [:]
                list_map.daifa_user_name = k
                list_map.amount = v.amount
                list_map.is_qianshou = v.is_qianshou
                list_map.qianshou_user_name = v.qianshou_user_name
                list_map.qianshoutime = v.qianshoutime
                list_map.daifa_user_id = v.daifa_user_id
                list_map.num = v.num
                list_map.checktime = v.checktime
                result.add(list_map)
            }
            map.list = result
            
        }else{
            def nowDate = new Date().format('yyyy-MM-dd')+" 00:00:00"
            def results = new ArrayList();
            def daiFaGoods = DaiFaGoods.executeQuery("select sum(d.num) as num,sum(d.actual_price*d.num) as amount,d.checktime from DaiFaGoods d " +
                     "where d.checktime is not null and  d.checktime<'"+nowDate+"'  group by substring(d.checktime,1,10) order by d.checktime desc",
                [max: params.max, offset: params.offset])
            def total = DaiFaGoods.executeQuery("select d.id from DaiFaGoods d " +
                     "where d.checktime is not null and  d.checktime<'"+nowDate+"'  group by substring(d.checktime,1,10)").size()

            daiFaGoods.each{ it ->
                Map paramMap = new HashMap()
                paramMap.num = it[0]
                paramMap.amount = it[1]
                paramMap.checktime = it[2].toString().substring(0,10)
                results.add(paramMap)
            }
            map = [list: results, total: total]
                //封装分页传给手机端
            def pager = new Pager(max:params.max,"offset":params.offset,"totalPage":((map.total-1)/params.max + 1) as int ,total:map.total)
            map.put("pager",pager)
        }
        
        
        def mm = new MobileMessage()
        mm.message = "获取签收列表成功"
        mm.result = "success"
        mm.model = map
        render mm as JSON
    }
    
    def daifaYanshouList(){ //代发人员验收列表
        if(session.loginPOJO.user.role != 'admin'){
             def mm = new MobileMessage()
                mm.message = "系统出错"
                mm.result = "fail"
                render mm as JSON
                return
        }
        if (!params.max) {
            params.max = 10  
        }else{
            params.max = new Long(params.max)
        }
        if (!params.offset) params.offset = 0  
        if (!params.sort) params.sort = "checktime"  
        if (!params.order) params.order = "desc" 
        def map = [:]
        
            def searchClosure =  {
                daifa_user{
                    eq("id",new Long(params.daifa_user_id))
                }
                    

                    between('checktime',Date.parse("yyyy-MM-dd HH:mm:ss",params.checktime+' 00:00:00'), Date.parse("yyyy-MM-dd HH:mm:ss",params.checktime+' 23:59:59'))
                
            }

            

            def o = DaiFaGoods.createCriteria();
            def results = o.list(params,searchClosure)
            map = [list: results, total: results.totalCount]     
            
            List m_result = new ArrayList()

            results.each{it->
                def paramsMap = new HashMap()
                it.properties.each{k,v->
                    paramsMap.put(k,v.toString())
                }
                paramsMap.put('payTime',it.daiFaOrder.payTime)
                paramsMap.put('id',it.id)
                paramsMap.put('orderSN',it.daiFaOrder.orderSN)
                
                m_result.add(paramsMap)
            }
            map.list = m_result
            
            
       
        //封装分页传给手机端
        def pager = new Pager(max:params.max,"offset":params.offset,"totalPage":((map.total-1)/params.max + 1) as int ,total:map.total)
        map.put("pager",pager)
        
        def mm = new MobileMessage()
        mm.message = "获取验收列表成功"
        mm.result = "success"
        mm.model = map
        render mm as JSON
    }
    
    def applyQianshouMobile(){
        def start_time = params.checktime+ " 00:00:00"
        def end_time = params.checktime+ " 23:59:59"
        DaiFaGoods.executeUpdate("update DaiFaGoods set is_qianshou = '1' where daifa_user =? and checktime between '"+start_time+"' and '"+end_time+"' and is_qianshou = '0' ",[User.get(session.loginPOJO.user.id)])
        def mm = new MobileMessage()
        mm.message = "提交提现申请成功"
        mm.result = "success"
        render mm as JSON
    }
    
    def checkQianshouMobile(){
        if(session.loginPOJO.user.role == 'admin'){
            def start_time = params.checktime+ " 00:00:00"
            def end_time = params.checktime+ " 23:59:59"
            User daifa_user = User.get(params.daifa_user_id)
            User qianshou_user = User.get(session.loginPOJO.user.id)
            DaiFaGoods.executeUpdate("update DaiFaGoods set is_qianshou = '2',qianshou_user=?,qianshoutime = now()  where daifa_user =? and " +
                "checktime between '"+start_time+"' and '"+end_time+"' and is_qianshou = '1'",[qianshou_user,daifa_user])
        }
        
        def mm = new MobileMessage()
        mm.message = "确认提现申请成功"
        mm.result = "success"
        render mm as JSON
    }
    
}
